% \iffalse meta-comment
%
%% File: latex-lab-context.dtx (C) Copyright 2025 LaTeX Project
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    https://www.latex-project.org/lppl.txt
%
%
% The development version of the bundle can be found below
%
%    https://github.com/latex3/latex2e/required/latex-lab
%
% for those people who are interested or want to report an issue.
%
\def\ltlabcontextdate{2025-07-09}
\def\ltlabcontextversion{0.5a}
%<*driver>
\DocumentMetadata{tagging=on,pdfstandard=ua-2,lang=en}
\documentclass{l3doc}
\usepackage{latex-lab-testphase-l3doc}
\EnableCrossrefs
\CodelineIndex
\begin{document}
  \DocInput{latex-lab-context.dtx}
\end{document}
%</driver>
%
% \fi
%
% \title{The \textsf{latex-lab-context} package\\
%    Providing context for template instances and code that needs
%    to know where and when it are executed}
%
% \author{\LaTeX{} Project\thanks{Initial implementation done by Frank Mittelbach}}
% \date{v\ltlabcontextversion\ \ltlabcontextdate}
%
% \maketitle
%
% \newcommand{\xt}[1]{\textsl{\textsf{#1}}}
% \newcommand{\TODO}[1]{\textbf{[TODO:} #1\textbf{]}}
%
% \providecommand\hook[1]{\texttt{#1}}
%
% \begin{abstract}
% \end{abstract}
%
% \section{Introduction}
%
%    In this module we implement the concept of \enquote{contexts}
%    within the document and depending on the current context
%    formatting behavior might change. The main application for this
%    are instances of templates (where things can be easily automated
%    to react to context, but is probably also applicate to other
%    situations (but there might need more thought).
%
% \subsection{Definition of a  \enquote{context}}
%
%   The \enquote{context} is an attribute of every point of the
%   formatted document, i.e., at each point during the formatting one
%   can determine in which \enquote{context} the formatting happens
%   and based on this adjust the formatting method.
%   
%   The \enquote{context} is not an entirely flat structure: we
%   distinguish between the \enquote{primary context} and the
%   \enquote{secondary context} both of which can be changed
%   individually based on a number of rules as discussed below.
%   
%   Any context is denoted by a name (\verb=[a-z]*= letters only). The
%   empty name is allowed to ease specification of the common case
%   (i.e., the default \enquote{primary context} is the main galley
%   and by default no \enquote{secondary context} is specified).
%   
% \subsection{The \enquote{primary context}}
%   
%   The \enquote{primary context} is described with a fixed (but
%   extensible?) set of names:
%   \begin{itemize}
%
%   \item \meta{empty} denotes that we are in "galley" context
%      producing text for the page
%
%   \item \texttt{footnote}
%      denotes that we are typesetting the footnote text
%
%   \item \texttt{float}
%      denotes that we are typesetting a floats
%
%   \item \texttt{marginal}
%      denotes that we are typesetting a marginal
%
%   \item \texttt{header}
%      denotes that we are typesetting the running header
%
%   \item \texttt{footer}
%      denotes that we are typesetting the running footer
%
%   \end{itemize}
%   
%   When the \enquote{primary context} is set it replaces the current
%   \enquote{primary context} and resets the \enquote{secondary
%   context} to \meta{empty}.  The setting is local, i.e., it obeys
%   grouping.
%   
%   It would be possible to be more granular, i.e., differentiate
%   between types of floats etc. But for now I suggest to start out
%   with this small set.
%   
%   
% \subsection{The \enquote{secondary context}}
%   
%   The \enquote{secondary context} concerns itself (for now) only
%   with font size changes, because that is most commonly a cause for
%   layout changes.  It is described through a fixed (but extensible?)
%   set of names:
%   
%   \begin{itemize}
%   \item
%      \meta{empty} denotes that there is no special secondary
%      context, i.e., that we are producing material in \cs{normalsize}
%
%   \item \texttt{tiny}
%      denotes that we are typesetting in \cs{tiny} font size
%   
%   \item And similarly for \texttt{scriptsize},
%     \texttt{footnotesize}, \texttt{small}, \texttt{large},
%     \texttt{Large}, \texttt{LARGE}, \texttt{huge}, and \texttt{Huge}.  
%   \end{itemize}
%   The above list of secondary contexts are automatically set by the
%   standard \LaTeX{} font size commands (as part of \cs{}). Classes
%   that use additional font size commands but do not use the
%   \LaTeXe{} command \cs{} need to explicitly set the secondary
%   context with \cs{SetSecondaryContext} if they want their size been
%   recognized as a context.
%   
%
% 
% \section{Provided or redefined commands}
%
% \begin{function}{\SetPrimaryContext}
% 
% \end{function}
%
%
%   \subsection{Notes}
%
%   With special classes, e.g., \texttt{ltx-talk}, additional primaries
%   could be added (and secondaries could be using the modes rather
%   than or in addition to the fontsizes). Or the modes could be part
%   of the primary names \dots. Could do with some experimentation
%   what works best.
%   

% 
% \section{Implementation}
%    \begin{macrocode}
%<*package>
%<@@=tag>
%    \end{macrocode}
%    \begin{macrocode}
\ProvidesExplPackage {latex-lab-testphase-context} {\ltlabcontextdate} {\ltlabcontextversion}
  {Providing context for instance, etc.}
%    \end{macrocode}
%
%    \begin{macrocode}
%<*package>
%<@@=context>
%    \end{macrocode}
%
%    \begin{macrocode}
\RequirePackage{latex-lab-testphase-block}  
%    \end{macrocode}
%    
%    
%    
%    
%    
% \subsubsection{Debugging}
%
%    
%  \begin{variable}{\g_@@_debug_bool}
%    
%    \begin{macrocode}
\bool_new:N \g_@@_debug_bool
%    \end{macrocode}
%  \end{variable}
%
%
%  \begin{macro}{\@@_debug:n,\@@_debug_typeout:n}
%    
%    \begin{macrocode}
\cs_new_eq:NN \@@_debug:n \use_none:n
\cs_new_eq:NN \@@_debug_typeout:n \use_none:n
%    \end{macrocode}
%  \end{macro}
%
%  \begin{macro}{\context_debug_on:,\context_debug_off:,
%                \@@_debug_gset:}
%    \begin{macrocode}
\cs_new_protected:Npn \context_debug_on:
  {
    \bool_gset_true:N \g_@@_debug_bool
    \@@_debug_gset:
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected:Npn \context_debug_off:
  {
    \bool_gset_false:N \g_@@_debug_bool
    \@@_debug_gset:
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected:Npn \@@_debug_gset:
  {
    \cs_gset_protected:Npx \@@_debug:n ##1
      { \bool_if:NT \g_@@_debug_bool {##1} }
    \cs_gset_protected:Npx \@@_debug_typeout:n ##1
      { \bool_if:NT \g_@@_debug_bool { \typeout{[Context]~ ==>~ ##1} } }
  }
%    \end{macrocode}
%  \end{macro}
%
%
%  \begin{macro}{\DebugContextsOn,\DebugContextsOff}
%    
%    \begin{macrocode}
\cs_new_protected:Npn \DebugContextsOn  { \context_debug_on:  }
\cs_new_protected:Npn \DebugContextsOff { \context_debug_off: }
%    \end{macrocode}
%    
%    \begin{macrocode}
\DebugContextsOff
%    \end{macrocode}
%  \end{macro}
%
%
%
%
%  \begin{macro}{\l_context_primary_tl}
%    
%    \begin{macrocode}
\tl_new:N \l_context_primary_tl
%    \end{macrocode}
%  \end{macro}
%
%
%
%
%  \begin{macro}{\SetPrimaryContext}
%    
%    \begin{macrocode}
\newcommand \SetPrimaryContext [1] {
  \tl_set:Ne \l_context_primary_tl
     { \tl_if_empty:nF { #1 }
       { \cs_if_exist_use:cF
         { g_@@_primary_ \l_context_primary_tl _ #1 _tl }
         { \cs_if_exist_use:cF
           { g_@@_primary_ * _ #1 _tl }
           { #1 }
         }
       }
     }
  \@@_debug_typeout:n{set~primary~ <-~ \l_context_primary_tl }   
  \SetSecondaryContext {}
}
%    \end{macrocode}
%  \end{macro}
%
%
%  \begin{macro}{\DeclarePrimaryContextRule}
%    
%    \begin{macrocode}
\newcommand \DeclarePrimaryContextRule [3] {
  \tl_gclear_new:c { g_@@_primary_ #1 _ #2 _tl }
  \tl_gset:cn      { g_@@_primary_ #1 _ #2 _tl } {#3}
}
%    \end{macrocode}
%  \end{macro}
%
%
%  \begin{macro}{\l_context_secondary_tl}
%    \TODO{perhaps to be replaced by a multi-dimensional solution}
%    \begin{macrocode}
\tl_new:N \l_context_secondary_tl
%    \end{macrocode}
%  \end{macro}
%
%
%  \begin{macro}{\SetSecondaryContext}
%    
%    \begin{macrocode}
\newcommand \SetSecondaryContext [1] {
  \tl_set:Ne \l_context_secondary_tl
     { \tl_if_empty:nF { #1 }
       { \cs_if_exist_use:cF
         { g_@@_secondary_ \l_context_secondary_tl _ #1 _tl }
         { \cs_if_exist_use:cF
           { g_@@_secondary_ * _ #1 _tl }
           { #1 }
         }
       }
     }
  \@@_debug_typeout:n{set~ secondary~ <-~ \l_context_secondary_tl }   
}
%    \end{macrocode}
%  \end{macro}
%
%
%  \begin{macro}{\DeclareSecondaryContextRule}
%    
%    \begin{macrocode}
\newcommand \DeclareSecondaryContextRule [3] {
  \tl_gclear_new:c { g_@@_secondary_ #1 _ #2 _tl }
  \tl_gset:cn      { g_@@_secondary_ #1 _ #2 _tl } {#3}
}
%    \end{macrocode}
%  \end{macro}
%
%
%
% \subsection{Supporting font size changes as a secondary context}
%
%
%
%  \begin{macro}{\@setfontsize}
%    
%    \begin{macrocode}
\def\@setfontsize#1#2#3{\@nomath#1%
  \ifx\protect\@typeset@protect
  \let\@currsize#1%
  \begingroup
    \escapechar\m@ne
    \expandafter
  \endgroup
    \expandafter
  \SetSecondaryContext
    \expandafter {\string#1}%
  \fi
  \fontsize{#2}{#3}\selectfont
}

\DeclareSecondaryContextRule{*}{normalsize}{}
%    \end{macrocode}
%  \end{macro}
%
%
%
% \subsection{Supporting primary context}
%
% \subsubsection{Float context}
%
%  \begin{macro}{\@float}
%    This should  work with most float pages. There are of course some
%    classes or packages that produce pseudo floats without calling
%    \cs{@float}. These need to be handled separately by adding a
%    \cs{SetPrimaryContext} in their code.
%    \begin{macrocode}
\AddToHook{cmd/@float/before}{\SetPrimaryContext{float}}
%    \end{macrocode}
%  \end{macro}
%
% \TODO{longtable and anythign else that runs around producing \cs{caption}s}
%
%
% \subsubsection{Footnote context}
%
% \TODO{in latex-lab-footnote}
%
% \subsubsection{Header context}
%
% \TODO{}
%
% \subsubsection{Footer context}
%
% \TODO{}
%
% \subsubsection{Marginal context}
%
% \TODO{}
%
%
%
%
%
% \subsection{Changes to lttemplates.dtx code}
%
%    \begin{macrocode}
%<@@=template>
%    \end{macrocode}
%
%    In the normal case (both primary and secondary context  are empty
%    we have 3 test. We have up to 4 tests if only primary is
%    non-empty and up to 5 tests if secondary is non-empty.
%    \begin{macrocode}
\cs_set_protected:Npn \_@@_use_instance_aux:nn #1#2 {
  \@@_debug_typeout:n {primary~ context~ is~ '\l_context_primary_tl'}       
  \@@_debug_typeout:n {secondary~ context~ is~ '\l_context_secondary_tl'}       
  \tl_if_empty:NTF \l__context_secondary_tl
     {
       \tl_if_empty:NTF \l_context_primary_tl
          {
            \@@_if_instance_exist:nnTF {#1} {#2}
              { \@@_use_existing_instance:nn { #1 } { #2 } }
              { \msg_error:nnnn { template } { unknown-instance } {#1} {#2} }
          }
          {
            \@@_if_instance_exist:nnTF {#1} { #2 : \l_context_primary_tl  }
              { \@@_use_existing_instance:nn {#1} { #2 : \l_context_primary_tl } }
              {
                \@@_if_instance_exist:nnTF {#1} {#2}
                  { \@@_use_existing_instance:nn {#1} {#2} }
                  { \msg_error:nnnn { template } { unknown-instance } {#1} {#2} }
              }
          }
     }
     {
       \@@_if_instance_exist:nnTF {#1} { #2 : \l_context_primary_tl : \l_context_secondary_tl  }
         { \@@_use_existing_instance:nn {#1} { #2 : \l_context_primary_tl : \l_context_secondary_tl } }
         {
           \tl_if_empty:NTF \l_context_primary_tl
              {
                \@@_if_instance_exist:nnTF {#1} {#2}
                  { \@@_use_existing_instance:nn {#1} {#2} }
                  { \msg_error:nnnn { template } { unknown-instance } {#1} {#2} }
              }
              {
                \@@_if_instance_exist:nnTF {#1} { #2 : \l_context_primary_tl  }
                  { \_@@_use_existing_instance:nn {#1} { #2 : \l_context_primary_tl } }
                  {
                    \@@_if_instance_exist:nnTF {#1} {#2}
                      { \@@_use_existing_instance:nn {#1} {#2} }
                      { \msg_error:nnnn { template } { unknown-instance } {#1} {#2} }
                  }
              }
         }
     }
}
%    \end{macrocode}
%    
%
%
%  \begin{macro}{\_@@_use_existing_instance:nn}
%    
%    \begin{macrocode}
\cs_new_protected:Npn \_@@_use_existing_instance:nn #1#2 {
  \@@_debug_typeout:n{use~ '#1'~ instance:~ #2 }
  \use:c { \c_@@_instances_root_tl #1 / #2 }
}
%    \end{macrocode}
%  \end{macro}
%
%
% \subsubsection{Debugging of templates}
%
%    
%  \begin{variable}{\g_@@_debug_bool}
%    
%    \begin{macrocode}
\bool_new:N \g_@@_debug_bool
%    \end{macrocode}
%  \end{variable}
%
%
%  \begin{macro}{\@@_debug:n,\@@_debug_typeout:n}
%    
%    \begin{macrocode}
\cs_new_eq:NN \@@_debug:n \use_none:n
\cs_new_eq:NN \@@_debug_typeout:n \use_none:n
%    \end{macrocode}
%  \end{macro}
%
%  \begin{macro}{\template_debug_on:,\template_debug_off:,
%                \@@_debug_gset:}
%    \begin{macrocode}
\cs_new_protected:Npn \template_debug_on:
  {
    \bool_gset_true:N \g_@@_debug_bool
    \@@_debug_gset:
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected:Npn \template_debug_off:
  {
    \bool_gset_false:N \g_@@_debug_bool
    \@@_debug_gset:
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new_protected:Npn \@@_debug_gset:
  {
    \cs_gset_protected:Npx \@@_debug:n ##1
      { \bool_if:NT \g_@@_debug_bool {##1} }
    \cs_gset_protected:Npx \@@_debug_typeout:n ##1
      { \bool_if:NT \g_@@_debug_bool { \typeout{[Template]~ ==>~ ##1} } }
  }
%    \end{macrocode}
%  \end{macro}
%
%
%  \begin{macro}{\DebugTemplatesOn,\DebugTemplatesOff}
%    
%    \begin{macrocode}
\cs_new_protected:Npn \DebugTemplatesOn  { \template_debug_on:  }
\cs_new_protected:Npn \DebugTemplatesOff { \template_debug_off: }
%    \end{macrocode}
%    
%    \begin{macrocode}
\DebugTemplatesOn
%    \end{macrocode}
%  \end{macro}
%
%
%
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
%
%
%
%    \begin{macrocode}
%<*latex-lab>
\ProvidesFile{context-latex-lab-testphase.ltx}
        [\ltlabcontextdate\space v\ltlabcontextversion\space 
         latex-lab wrapper context]

\RequirePackage{latex-lab-testphase-context}

%</latex-lab>
%    \end{macrocode}

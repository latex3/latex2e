This is a generated file for the l3build validation system.
Don't change this file in any respect.
[Blocks] ==> itemize-env-start
[Blocks] ==> use 'block' instance: listblock-1
[Blocks] ==> __kernel_displayblock_beginpar_hmode:w
[Blocks] ==> __kernel_displayblock_begin:
[Blocks] ==> use 'list' instance: itemize-1
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> __kernel_displayblock_end:
[Blocks] ==> enumerate-env-start
[Blocks] ==> use 'block' instance: listblock-1
[Blocks] ==> __kernel_displayblock_beginpar_vmode:
[Blocks] ==> __kernel_displayblock_begin:
[Blocks] ==> use 'list' instance: enum-1
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> __kernel_displayblock_end:
[Blocks] ==> description-env-start
[Blocks] ==> use 'block' instance: listblock-1
[Blocks] ==> __kernel_displayblock_beginpar_hmode:w
[Blocks] ==> __kernel_displayblock_begin:
[Blocks] ==> use 'list' instance: description
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item with optional
[Blocks] ==> item everypar on input line ...
[1
]
[Blocks] ==> template:item:std
[Blocks] ==> item with optional
[Blocks] ==> item everypar on input line ...
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> __kernel_displayblock_end:
[Blocks] ==> quote-env-start
[Blocks] ==> use 'block' instance: quoteblock-1
[Blocks] ==> __kernel_displayblock_beginpar_hmode:w
[Blocks] ==> __kernel_displayblock_begin:
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> __kernel_displayblock_end:
[Blocks] ==> quotation-env-start
[Blocks] ==> use 'block' instance: quotationblock-1
[Blocks] ==> __kernel_displayblock_beginpar_hmode:w
[Blocks] ==> __kernel_displayblock_begin:
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> __kernel_displayblock_end:
[Blocks] ==> verbatim-env-start
[Blocks] ==> use 'block' instance: verbatimblock-0
[Blocks] ==> __kernel_displayblock_beginpar_hmode:w
[Blocks] ==> __kernel_displayblock_begin:
[Blocks] ==> use 'para' instance: justify
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> __kernel_displayblock_end:
[Blocks] ==> verbatim-env-start
[Blocks] ==> use 'block' instance: verbatimblock-0
[Blocks] ==> __kernel_displayblock_beginpar_hmode:w
[Blocks] ==> __kernel_displayblock_begin:
[Blocks] ==> use 'para' instance: justify
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> __kernel_displayblock_end:
[Blocks] ==> itemize-env-start
[Blocks] ==> use 'block' instance: listblock-1
[Blocks] ==> __kernel_displayblock_beginpar_vmode:
[Blocks] ==> __kernel_displayblock_begin:
[Blocks] ==> use 'list' instance: itemize-1
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> enumerate-env-start
[Blocks] ==> use 'block' instance: listblock-2
[Blocks] ==> __kernel_displayblock_beginpar_hmode:w
[Blocks] ==> __kernel_displayblock_begin:
[Blocks] ==> use 'list' instance: enum-1
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> enumerate-env-start
[Blocks] ==> use 'block' instance: listblock-3
[Blocks] ==> __kernel_displayblock_beginpar_hmode:w
[Blocks] ==> __kernel_displayblock_begin:
[Blocks] ==> use 'list' instance: enum-2
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> itemize-env-start
[Blocks] ==> use 'block' instance: listblock-4
[Blocks] ==> __kernel_displayblock_beginpar_hmode:w
[Blocks] ==> __kernel_displayblock_begin:
[2]
[Blocks] ==> use 'list' instance: itemize-2
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item with optional
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item with optional
[Blocks] ==> item everypar on input line ...
[Blocks] ==> itemize-env-start
[Blocks] ==> use 'block' instance: listblock-5
[Blocks] ==> __kernel_displayblock_beginpar_hmode:w
[Blocks] ==> __kernel_displayblock_begin:
[Blocks] ==> use 'list' instance: itemize-3
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> itemize-env-start
[Blocks] ==> use 'block' instance: listblock-6
[Blocks] ==> __kernel_displayblock_beginpar_hmode:w
[Blocks] ==> __kernel_displayblock_begin:
[Blocks] ==> use 'list' instance: itemize-4
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> __kernel_displayblock_end:
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> __kernel_displayblock_end:
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> __kernel_displayblock_end:
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> __kernel_displayblock_end:
[Blocks] ==> description-env-start
[Blocks] ==> use 'block' instance: listblock-3
[Blocks] ==> __kernel_displayblock_beginpar_hmode:w
[Blocks] ==> __kernel_displayblock_begin:
[Blocks] ==> use 'list' instance: description
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item with optional
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item with optional
[Blocks] ==> item everypar on input line ...
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> __kernel_displayblock_end:
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> __kernel_displayblock_end:
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> __kernel_displayblock_end:
[Blocks] ==> description-env-start
[Blocks] ==> use 'block' instance: listblock-1
[Blocks] ==> increment /P on input line ...
[Blocks] ==> use 'list' instance: description
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item with optional
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item with optional
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item with optional
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item with optional
[Blocks] ==> item everypar on input line ...
[3]
[Blocks] ==> blockenv common ending on input line ...
Overfull \hbox (3.16754pt too wide) in paragraph at lines ...
[]\T1/cmr/m/n/10 The PDF tag set sup-ports that nat-u-rally for struc-tures like lists but (strangely
\hbox(7.49817+2.49939)x345.0, glue set - 1.0
.\hbox(0.0+0.0)x15.0
.\T1/cmr/m/n/10 T
.\T1/cmr/m/n/10 h
.\T1/cmr/m/n/10 e
.\glue 3.33252 plus 1.66626 minus 1.11084
.\T1/cmr/m/n/10 P
.\T1/cmr/m/n/10 D
.\T1/cmr/m/n/10 F
.\glue 3.33252 plus 1.66458 minus 1.11194
.\T1/cmr/m/n/10 t
.\T1/cmr/m/n/10 a
.\T1/cmr/m/n/10 g
.\glue 3.33252 plus 1.66626 minus 1.11084
.\T1/cmr/m/n/10 s
.\T1/cmr/m/n/10 e
.\T1/cmr/m/n/10 t
.\glue 3.33252 plus 1.66626 minus 1.11084
.\T1/cmr/m/n/10 s
.\T1/cmr/m/n/10 u
.\T1/cmr/m/n/10 p
.\discretionary
..\T1/cmr/m/n/10 -
.\T1/cmr/m/n/10 p
.\kern0.27771
.\T1/cmr/m/n/10 o
.\T1/cmr/m/n/10 r
.\T1/cmr/m/n/10 t
.\T1/cmr/m/n/10 s
.\glue 3.33252 plus 1.66626 minus 1.11084
.\T1/cmr/m/n/10 t
.\T1/cmr/m/n/10 h
.\T1/cmr/m/n/10 a
.\T1/cmr/m/n/10 t
.\glue 3.33252 plus 1.66626 minus 1.11084
.\T1/cmr/m/n/10 n
.\T1/cmr/m/n/10 a
.\T1/cmr/m/n/10 t
.\discretionary
..\T1/cmr/m/n/10 -
.\T1/cmr/m/n/10 u
.\discretionary
..\T1/cmr/m/n/10 -
.\T1/cmr/m/n/10 r
.\T1/cmr/m/n/10 a
.\T1/cmr/m/n/10 l
.\T1/cmr/m/n/10 l
.\T1/cmr/m/n/10 y
.\glue 3.33252 plus 1.66626 minus 1.11084
.\T1/cmr/m/n/10 f
.\T1/cmr/m/n/10 o
.\T1/cmr/m/n/10 r
.\glue 3.33252 plus 1.66626 minus 1.11084
.\T1/cmr/m/n/10 s
.\T1/cmr/m/n/10 t
.\T1/cmr/m/n/10 r
.\T1/cmr/m/n/10 u
.\T1/cmr/m/n/10 c
.\discretionary
..\T1/cmr/m/n/10 -
.\T1/cmr/m/n/10 t
.\T1/cmr/m/n/10 u
.\T1/cmr/m/n/10 r
.\T1/cmr/m/n/10 e
.\T1/cmr/m/n/10 s
.\glue 3.33252 plus 1.66626 minus 1.11084
.\T1/cmr/m/n/10 l
.\T1/cmr/m/n/10 i
.\T1/cmr/m/n/10 k
.\kern-0.27771
.\T1/cmr/m/n/10 e
.\glue 3.33252 plus 1.66626 minus 1.11084
.\T1/cmr/m/n/10 l
.\T1/cmr/m/n/10 i
.\T1/cmr/m/n/10 s
.\T1/cmr/m/n/10 t
.\T1/cmr/m/n/10 s
.\glue 3.33252 plus 1.66626 minus 1.11084
.\T1/cmr/m/n/10 b
.\T1/cmr/m/n/10 u
.\T1/cmr/m/n/10 t
.\glue 3.33252 plus 1.66626 minus 1.11084
.\T1/cmr/m/n/10 (
.\T1/cmr/m/n/10 s
.\T1/cmr/m/n/10 t
.\T1/cmr/m/n/10 r
.\T1/cmr/m/n/10 a
.\T1/cmr/m/n/10 n
.\T1/cmr/m/n/10 g
.\T1/cmr/m/n/10 e
.\T1/cmr/m/n/10 l
.\T1/cmr/m/n/10 y
.\glue(\rightskip) 0.0
[Blocks] ==> itemize-env-start
[Blocks] ==> use 'block' instance: listblock-1
[Blocks] ==> @endpe=false on input line ...
[Blocks] ==> use 'list' instance: itemize-1
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> itemize-env-start
[Blocks] ==> use 'block' instance: listblock-1
[Blocks] ==> increment /P on input line ...
[Blocks] ==> use 'list' instance: itemize-1
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> itemize-env-start
[Blocks] ==> use 'block' instance: listblock-1
[Blocks] ==> increment /P on input line ...
[Blocks] ==> use 'list' instance: itemize-1
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> itemize-env-start
[Blocks] ==> use 'block' instance: listblock-1
[Blocks] ==> increment /P on input line ...
[4]
[Blocks] ==> use 'list' instance: itemize-1
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> itemize-env-start
[Blocks] ==> use 'block' instance: listblock-1
[Blocks] ==> @endpe=false on input line ...
[Blocks] ==> use 'list' instance: itemize-1
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> itemize-env-start
[Blocks] ==> use 'block' instance: listblock-1
[Blocks] ==> increment /P on input line ...
[Blocks] ==> use 'list' instance: itemize-1
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> center-env-start
[Blocks] ==> use 'block' instance: displayblock-0
[Blocks] ==> increment /P on input line ...
[5]
[Blocks] ==> use 'para' instance: center
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> flushleft-env-start
[Blocks] ==> use 'block' instance: displayblock-0
[Blocks] ==> increment /P on input line ...
[Blocks] ==> use 'para' instance: raggedleft
[Blocks] ==> blockenv common ending on input line ...
[6]
[Blocks] ==> itemize-env-start
[Blocks] ==> use 'block' instance: listblock-1
[Blocks] ==> increment /P on input line ...
[Blocks] ==> use 'list' instance: itemize-1
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> item everypar on input line ...
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> itemize-env-start
[Blocks] ==> use 'block' instance: listblock-1
[Blocks] ==> increment /P on input line ...
[Blocks] ==> use 'list' instance: itemize-1
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> blockenv common ending on input line ...
---------- Before ----------------
[Blocks] ==> itemize-env-start
[Blocks] ==> use 'block' instance: listblock-1
[Blocks] ==> increment /P on input line ...
[Blocks] ==> use 'list' instance: itemize-1
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> blockenv common ending on input line ...
--------- Separate -----------------
[Blocks] ==> itemize-env-start
[Blocks] ==> use 'block' instance: listblock-1
[Blocks] ==> @endpe=false on input line ...
[Blocks] ==> use 'list' instance: itemize-1
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> blockenv common ending on input line ...
--------- After -----------------
[Blocks] ==> itemize-env-start
[Blocks] ==> use 'block' instance: listblock-1
[Blocks] ==> @endpe=false on input line ...
[Blocks] ==> use 'list' instance: itemize-1
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[7]
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> itemize-env-start
[Blocks] ==> use 'block' instance: listblock-1
[Blocks] ==> @endpe=false on input line ...
[Blocks] ==> use 'list' instance: itemize-1
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> enumerate-env-start
[Blocks] ==> use 'block' instance: listblock-2
[Blocks] ==> @endpe=false on input line ...
[Blocks] ==> use 'list' instance: enum-1
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> enumerate-env-start
[Blocks] ==> use 'block' instance: listblock-3
[Blocks] ==> @endpe=false on input line ...
[Blocks] ==> use 'list' instance: enum-2
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> itemize-env-start
[Blocks] ==> use 'block' instance: listblock-4
[Blocks] ==> @endpe=false on input line ...
[Blocks] ==> use 'list' instance: itemize-2
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item with optional
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item with optional
[Blocks] ==> item everypar on input line ...
[Blocks] ==> itemize-env-start
[Blocks] ==> use 'block' instance: listblock-5
[Blocks] ==> @endpe=false on input line ...
[Blocks] ==> use 'list' instance: itemize-3
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> itemize-env-start
[Blocks] ==> use 'block' instance: listblock-6
[Blocks] ==> @endpe=false on input line ...
[Blocks] ==> use 'list' instance: itemize-4
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> Structure-end P at list-end on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item everypar on input line ...
[Blocks] ==> blockenv common ending on input line ...
[Blocks] ==> description-env-start
[Blocks] ==> use 'block' instance: listblock-1
[Blocks] ==> @endpe=false on input line ...
[Blocks] ==> use 'list' instance: description
[Blocks] ==> template:list:std
[Blocks] ==> template:list:std end
[Blocks] ==> template:item:std
[Blocks] ==> item with optional
[Blocks] ==> item everypar on input line ...
[Blocks] ==> template:item:std
[Blocks] ==> item with optional
[Blocks] ==> item everypar on input line ...
[Blocks] ==> blockenv common ending on input line ...
[8] (gallery-III-with-sec-tagging-off.aux)
Package tagpdf Warning: The number of automatic begin (15) and end (27) text-unit para hooks differ!
Package tagpdf Warning: The number of automatic begin (21) and end (36) text para hooks differ!

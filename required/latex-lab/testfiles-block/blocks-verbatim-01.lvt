
\DocumentMetadata{uncompress
  ,testphase=phase-III
%  ,testphase=block
  ,pdfversion=2.0
  ,debug={log=vv}
}

\DebugBlocksOn


\documentclass{article}

\input{regression-test}


\newcommand\struct[1]{\texttt{<#1>}}
%\showoutput

\begin{document}

\START

\section{Verbatim blocks in paragraphs}

Some text in front of the code:
\begin{verbatim}
\item\relax  UUU      % first code line
   foo bar            % second
\end{verbatim}
and some more text after it.


\bigskip   

This one shows visible spaces but is otherwise identical:
\begin{verbatim*}
\item\relax  UUU      % first code line
   foo bar            % second
\end{verbatim*}

\subsection*{Commentary}

\begin{em}
  \begin{itemize}
  \item
    There is not really a good structure to tag code displays. The
    \struct{Code} tag is for code snippets within text, but it is
    essentially all there is. So we build a structure around that.

  \item
    
    This is a PDF 2.0 file and as we all know applying the rollmapping
    in Acrobat fails for 2.0 files. So here is what we are mapping to:
    \begin{description}
    \item[\struct{text-unit}] This is rolemapped to \struct{Part}
    \item[\struct{text}]
      A posh word for \struct{P} (see discussion
      about \struct{text-unit} elsewhere)
    \item[\struct{verbatim}]  This goes to \struct{P}
    \item[\struct{codeline}] This goes to \struct{Sub}. Codelines
      could have line numbers, i.e., \struct{Lbl} which is supported
      as part of \struct{Sub}.
    \end{description}

  \item
    Given that \struct{Sub} is PDF 2.0 only, we currently map
    \struct{codeline} to \struct{Span} if we produce PDF 1.7. However
    there might be better ways to do this, so this is open to debate.
  
  \end{itemize}
\end{em}

\end{document}

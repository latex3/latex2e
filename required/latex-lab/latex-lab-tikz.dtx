% \iffalse meta-comment
%
%% File: latex-lab-tikz.dtx (C) Copyright 2025 LaTeX Project
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    https://www.latex-project.org/lppl.txt
%
%
% The development version of the bundle can be found below
%
%    https://github.com/latex3/latex2e/required/latex-lab
%
% for those people who are interested or want to report an issue.
%
\def\ltlabtikzdate{2025-03-18}
\def\ltlabtikzversion{0.80b}
%<*driver>
\documentclass{l3doc}
\EnableCrossrefs
\CodelineIndex
\begin{document}
  \DocInput{latex-lab-tikz.dtx}
\end{document}
%</driver>
%
% \fi
%
% \providecommand\tikzname{Ti\emph {k}Z}
% \title{The \textsf{latex-lab-tikz} package\\
% Support for the tagging of \tikzname\ pictures }
% \author{\LaTeX{} Project\thanks{Initial implementation done by Ulrike Fischer}}
% \date{v\ltlabtikzversion\ \ltlabtikzdate}
%
% \maketitle
%
% \newcommand{\xt}[1]{\textsl{\textsf{#1}}}
% \newcommand{\TODO}[1]{\textbf{[TODO:} #1\textbf{]}}
% \newcommand{\docclass}{document class \marginpar{\raggedright document class
% customizations}}
% \providecommand\hook[1]{\texttt{#1}}
%
% \NewDocElement[printtype=\textit{socket},idxtype=socket,idxgroup=Sockets]{Socket}{socketdecl}
% \NewDocElement[printtype=\textit{hook},idxtype=hook,idxgroup=Hooks]{Hook}{hookdecl}
% \NewDocElement[printtype=\textit{plug},idxtype=plug,idxgroup=Plugs]{Plug}{plugdecl}
%

%
% \begin{abstract}
% \end{abstract}
%
% \section{Introduction}
%
% Tagging of pictures is non trivial.
%
% At first pictures generally can have various purposes:
% \begin{itemize}
% \item They can be purely ornamental and decorative, e.g. some page border.
% This should normally be tagged as artifact.
%
% \item They can show a illustrative figure, similar to png graphics included with
% \cs{includegraphics}.
% This should normally be tagged as a Figure structure with alternative text.
%
% \item They can be meant as normal text. For example the todonotes package uses a
% \tikzname\ picture to surround the text in a node with some colored background.
% In this case the text should be tagged e.g. as an Aside.
%
% \item They can represent a symbol. Then we want to tag as Span structure element
% with an /ActualText or perhaps even simply in the stream with a
% SPAN-BDC with an /ActualText.
%
% \item and naturally there can be all sort of mixtures of these elements.
% \end{itemize}
%
% At second the various packages that allow to draw pictures uses lots of boxes and 
% moves them around and that makes is not easy to get the tagging right --
% at least with pdflatex where one has to insert the literals at the right time.
%
% At third in some cases, e.g., when the picture is tagged as Figure,
% one normally should calculate the BBox and this typically require some low-level 
% hacking into the picture code.
% 
% The following is a first try to handle this problems for \tikzname\ pictures.
% Resulting structures and contents should be checked!
% 
% 
% The code setups sockets and keys that are \tikzname-specific. But the general
% structure should be usable for other packages like pstricks or luamplibs if they
% replace the names and patches by suitable code from these packages.
%
% The main idea of the implementation is to use sockets that allow to change the
% tagging purpose of the \tikzname\ picture. This must be done before by processing
% the keys once before the actual environment to extract the tagging keys
% as \tikzname\ processes the keys too late to allow to do this while it normally
% processes its the optional argument.
%
% \subsection{Tagging recipes}
%
% As pictures have so varied purposes there are a number of
% \enquote{tagging recipes}. The main method to set the recipe is
% the optional argument: A picture with, e.g., an \texttt{alt} key is 
% tagged as a Figure. There are also \cs{tagpdfsetup} keys in this module to change the
% recipe, but it is not clear currently, if this is really useful and 
% how this can be extended to cover also other
% picture environments like \texttt{picture} or \texttt{pspicture}. 
% 
% The following recipes exist:
%
% \begin{description}
% \item[figure] 
% It surrounds the picture with a \texttt{Figure} tag and adds a BBox.
% Inside the figure tagging is suspended.
% Such a figure should have an alternative text which describes the content. This alternative
% text must be set with the \texttt{alt} key and the use of the \texttt{alt} key therefore
% also activates this recipe:
% \begin{verbatim}
% \begin{tikzpicture}[alt=A duck]
% \duck
% \end{tikzpicture}
% \end{verbatim}
% This recipe is meant for meaningful pictures. It is code wise the most complicated
% case as getting the BBox requires some patching.
%
% \item[text] This surrounds the graphical parts with an artifact MC and activates
% tagging on node texts. It is meant for small pictures containing text in a node
% that should be part of the text flow, e.g. a todo. It should be possible to exclude
% some node and mark them as artifact locally, e.g. in a scope or with the optional argument
% of the node.
%
% \item[artifact] This marks the picture as an artifact. This is meant for
% decorations. This recipe is activated if the \texttt{artifact} key is used or
% if the artifact tagging recipe is activated in \cs{tagpdfsetup} (see below).
%
% \item[actualtext] This is meant for pictures where the drawing should
% represent a single symbol or small number of symbols. This is tagged as a Span
% and then internal tagging is suspended.
% Such pictures should then add an \texttt{actualtext}:
% \begin{verbatim}
% \begin{tikzpicture}[actualtext=A]
% % drawing of a A
% \end{tikzpicture}
% \end{verbatim}
%
% \end{description}
% \section{Todos}
% \begin{enumerate}
% \item
%
% \end{enumerate}
%
% \begin{implementation}
% \section{Implementation}
%    \begin{macrocode}
%<*package>
%<@@=tag>
%    \end{macrocode}
%    \begin{macrocode}
\ProvidesExplPackage {latex-lab-testphase-tikz} {\ltlabtikzdate} {\ltlabtikzversion}
  {Code related to the tagging of tikz pictures}
%    \end{macrocode}
%
% \subsection{Sockets}
%
% \begin{socketdecl}{
%   tagsupport/tikzpicture/init,
%   tagsupport/tikzpicture/begin,
%   tagsupport/tikzpicture/end}
% Sockets at the begin and the end of a tikzpicture.
% The argument in the \texttt{init} 
% should process the keys of the picture and switch
% the plugs if needed.
%    \begin{macrocode}
\NewTaggingSocket{tikzpicture/init}{1}
\NewTaggingSocket{tikzpicture/begin}{0}
\NewTaggingSocket{tikzpicture/end}{0}
%    \end{macrocode}
% \end{socketdecl}
%
% \begin{socketdecl}{tagsupport/tikzpicture/text/begin,tagsupport/tikzpicture/text/end}
% Sockets at the end and begin of text parts.
%    \begin{macrocode}
\NewSocket{tagsupport/tikzpicture/text/begin}{0}
\NewSocket{tagsupport/tikzpicture/text/end}{0}
%    \end{macrocode}
% \end{socketdecl}
%%
%
% \subsection{Plugs}
%
% \begin{plugdecl}{default (tagsupport/tikzpicture/init)}
% The init socket takes a list of keys, processes the known keys to setup tagging options
% and then assigns the plugs.
% TODO: correct module name? 
% TODO: tikz should probably use pgfkeys, but as l3keys are easier for me \ldots
%    \begin{macrocode}
\NewTaggingSocketPlug{tikzpicture/init}{default}
  {
    \keys_set_known:nn { tikz / tagging } {#1}  
  }
\AssignTaggingSocketPlug{tikzpicture/init}{default}
%    \end{macrocode}
% \end{plugdecl}
% 
% \begin{plugdecl}{text (tagsupport/tikzpicture/begin),text (tagsupport/tikzpicture/end)}
% This plug handles the \tikzname\ picture as a text object. So the graphical parts
% are tagged as artifact, but when we encounter a node we activate tagging there.
% There is no Bbox.
%    \begin{macrocode}
\NewTaggingSocketPlug{tikzpicture/begin}{text}
  {
   \ifvmode
    {
     \UseTaggingSocket{para/begin}  %check
    }
   \fi
   \tag_mc_end_push:
   \tagmcbegin{artifact}
%    \end{macrocode}
% We hook into two pgf commands to add the tagging code.
% They are only used for postscript and svg so it should be
% safe inside a tagging socket for now.
% TODO: ask for an interface.
%    \begin{macrocode}
   \def\pgfsys@begin@text
    {
      \tag_resume:n{\tikzpicture}
      \tag_socket_use:n{tikzpicture/text/begin}
    }
   \def\pgfsys@end@text
    {
      \tag_socket_use:n{tikzpicture/text/end}
      \tag_suspend:n{\tikzpicture}
    }
  }
\NewTaggingSocketPlug{tikzpicture/end}{text}
  {
   \tagmcend
   \tag_mc_begin_pop:n{}
  }
%    \end{macrocode}
% \end{plugdecl}
%
% \begin{plugdecl}{figure (tagsupport/tikzpicture/begin),figure (tagsupport/tikzpicture/end)}
% This plug handles the \tikzname\ picture as a figure.
% Around the graphic is a \texttt{Figure} environment which will
% use an alt text given in the optional argument and internally tagging is suspended.
% The Bbox will be set (after the second compilation) to the size of the bounding box.
%    \begin{macrocode}
\tagpdfsetup{role/new-tag=tikzpicture/Figure}
\NewTaggingSocketPlug{tikzpicture/begin}{figure}
  {
    \ifvmode
     {
      \tag_socket_use:n{para/begin}
     }
    \fi
    \tag_mc_end_push:
    \tag_struct_begin:n
     {
      tag=tikzpicture,
      alt=\l__tikz_tagging_alt_tl
     }
    \pgfrememberpicturepositiononpagetrue
    \tag_mc_begin:n{tag=Figure}
  }

\NewTaggingSocketPlug{tikzpicture/end}{figure}
  {
   \tag_mc_end:
   \cs_set:Npn\pgfqpoint##1##2
    {
      \dim_to_decimal_in_bp:n {##1+ \pgf@picminx}
      \c_space_tl
      \dim_to_decimal_in_bp:n {##2+ \pgf@picminy}
      \c_space_tl
      \dim_to_decimal_in_bp:n {##1+ \pgf@picmaxx}
      \c_space_tl
      \dim_to_decimal_in_bp:n {##2+ \pgf@picmaxx}
    }
   \cs_if_exist:cT { pgf@sys@pdf@mark@pos@pgfid\the\pgf@picture@serial@count }
    {
%    \end{macrocode}
% TODO: this needs an official interface. 
%    \begin{macrocode}
      \__tag_prop_gput:cne
        { g__tag_struct_ \g__tag_struct_stack_current_tl _prop }
        { A }
        {
           <<
             /O /Layout /BBox~
             [
               \use:c
                { pgf@sys@pdf@mark@pos@pgfid\the\pgf@picture@serial@count }
             ]
           >>
        }
     }
   \tag_struct_end:
   \tag_mc_begin_pop:n{}
  }
%    \end{macrocode}
% \end{plugdecl}
%
% \begin{plugdecl}{actualtext (tagsupport/tikzpicture/begin),actualtext (tagsupport/tikzpicture/end)}
% This plug handles the \tikzname\ picture as a symbol with an actualtext.
% It tags the content as a Span and expects an actualtext.
% Internally tagging is suspended.
%    \begin{macrocode}
\NewTaggingSocketPlug{tikzpicture/begin}{actualtext}
  {
   \ifvmode
    {
     \tag_socket_use:n{para/begin}
    }
   \fi
   \tag_mc_end_push:
   \tag_struct_begin:n{tag=Span,actualtext=\l__tikz_tagging_actualtext_tl}
   \tag_mc_begin:n{}
  }

\NewTaggingSocketPlug{tikzpicture/end}{actualtext}
  {
   \tag_mc_end:
   \tag_struct_end:
   \tag_mc_begin_pop:n{}
  }
%    \end{macrocode}
% \end{plugdecl}
%
% \begin{plugdecl}{artifact (tagsupport/tikzpicture/begin),artifact (tagsupport/tikzpicture/end)}
% This plug handles the \tikzname\ picture as an artifact, as decoration.
% So it is surrounded by an artifact MC and internal text does not restart tagging.
%    \begin{macrocode}
\NewTaggingSocketPlug{tikzpicture/begin}{artifact}
  {
    \ifvmode
     {
      \tag_socket_use:n{para/begin}
     }
    \fi
    \tag_mc_end_push:
    \tag_mc_begin:n{artifact}
  }

\NewTaggingSocketPlug{tikzpicture/end}{artifact}
  {
    \tag_mc_end:
    \tag_mc_begin_pop:n{}
  }
%    \end{macrocode}
% \end{plugdecl}
% 
%  By default we use the text plugs
%    \begin{macrocode}
\AssignTaggingSocketPlug{tikzpicture/begin}{text}
\AssignTaggingSocketPlug{tikzpicture/end}{text}
%    \end{macrocode}
%
% We add the begin socket to the \cs{tikz@picture} command (it is also used
% by \cs{tikz}). 
% This allows us to process the keys of the picture, assign the plugs 
% and then to suspend tagging.
%    \begin{macrocode}
\AddToHookWithArguments{cmd/tikz@picture/before}
  {
    \tag_socket_use:nn{tikzpicture/init}{#1}
    \tag_socket_use:n {tikzpicture/begin}
    \tag_suspend:n{\tikzpicture}
  }
%    \end{macrocode}
% The end socket is in the \cs{endpgfpicture} command.
%    \begin{macrocode}
\AddToHook{cmd/endpgfpicture/after}
  {
    \tag_resume:n{\tikzpicture}
    \tag_socket_use:n{tikzpicture/end}
  }
%    \end{macrocode}
%
% \begin{plugdecl}{default (tagsupport/tikzpicture/text/begin),
%  default (tagsupport/tikzpicture/text/end)}
% These sockets are used inside the text
% plugs and ends the previous mc and restarts it after the text.
%    \begin{macrocode}
\NewTaggingSocketPlug{tikzpicture/text/begin}{default}
  {
   \tag_mc_end:
   \tag_mc_begin:n{}
  }
\NewTaggingSocketPlug{tikzpicture/text/end}{default}
  {
   \tag_mc_end:
   \tag_mc_begin:n{artifact}
  }
\AssignTaggingSocketPlug{tikzpicture/text/begin}{default}
\AssignTaggingSocketPlug{tikzpicture/text/end}{default}
%    \end{macrocode}
% \end{plugdecl}
%
% \subsection{Keys to change the tagging behaviour}
% These keys will be processed directly at the begin of the picture commands
% to change the tagging behaviour. They should also be usable for other 
% picture environments but for now we make the tikz specific.
% TODO: thinks about module name
%    \begin{macrocode}
\tl_new:N  \l__tikz_tagging_alt_tl
\tl_set:Nn \l__tikz_tagging_alt_tl {Alternative~text~missing!}
\tl_new:N  \l__tikz_tagging_actualtext_tl

\keys_define:nn { tikz / tagging }
  {
    alt        .code:n = 
     {
       \tl_set:No \l__tikz_tagging_alt_tl{#1}
       \AssignTaggingSocketPlug{tikzpicture/begin}{figure}
       \AssignTaggingSocketPlug{tikzpicture/end}{figure}
       \def\pgfsys@begin@text{}
       \def\pgfsys@end@text{}
     },
    actualtext .code:n = 
     {
       \tl_set:No \l__tikz_tagging_actualtext_tl {#1}
       \AssignTaggingSocketPlug{tikzpicture/begin}{actualtext}
       \AssignTaggingSocketPlug{tikzpicture/end}{actualtext}
       \def\pgfsys@begin@text{}
       \def\pgfsys@end@text{}    
     },
    artifact   .code:n = 
     {
       \AssignTaggingSocketPlug{tikzpicture/begin}{artifact}
       \AssignTaggingSocketPlug{tikzpicture/end}{artifact}
       \def\pgfsys@begin@text{}
       \def\pgfsys@end@text{}
     }
  }
%    \end{macrocode}
% 
%   
% \subsection{Key definitions for \tikzname}
%    \begin{macrocode}
\AddToHook{package/tikz/after}
  {
%    \end{macrocode}
% we add a dummy definition for alt, actualtext and artifact key to avoid errors,
% and to allow to set the variables outside the tikzpicture.
%    \begin{macrocode}
   \tikzset
     {
      alt/.code={\tl_set:No \l__tikz_tagging_alt_tl{#1}},
      actualtext/.code={\tl_set:No \l__tikz_tagging_actualtext_tl {#1}},
      artifact/.code=
       {
         \AssignTaggingSocketPlug{tikzpicture/begin}{artifact}
         \AssignTaggingSocketPlug{tikzpicture/end}{artifact}
         \def\pgfsys@begin@text{}
         \def\pgfsys@end@text{} 
       }
     }  
%    \end{macrocode}
%
% \subsection{\tikzname~ keys to switch the recipes}
%
%    \begin{macrocode}
   \tikzset 
     {
       tagging/.is~choice,
       tagging/text/.code =
        {
          \AssignTaggingSocketPlug{tikzpicture/begin}{text}
          \AssignTaggingSocketPlug{tikzpicture/end}{text}
        }, 
       tagging/figure/.code =
        {
          \AssignTaggingSocketPlug{tikzpicture/begin}{figure}
          \AssignTaggingSocketPlug{tikzpicture/end}{figure}
          \def\pgfsys@begin@text{}
          \def\pgfsys@end@text{}
        },       
       tagging/actualtext/.code =
        {
           \AssignTaggingSocketPlug{tikzpicture/begin}{actualtext}
           \AssignTaggingSocketPlug{tikzpicture/end}{actualtext}
           \def\pgfsys@begin@text{}
           \def\pgfsys@end@text{}    
        },           
       tagging/artifact/.code =
        {
          \AssignTaggingSocketPlug{tikzpicture/begin}{artifact}
          \AssignTaggingSocketPlug{tikzpicture/end}{artifact}
          \def\pgfsys@begin@text{}
          \def\pgfsys@end@text{}
        },
     }
 }
%    \end{macrocode}
%
% Todonotes work with the default text recipe quite ok, details can
% be handled later.
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%    \begin{macrocode}
%<*latex-lab>
\ProvidesFile{tikz-latex-lab-testphase.ltx}
        [\ltlabtikzdate\space v\ltlabtikzversion\space
         latex-lab wrapper tikz]

\RequirePackage{latex-lab-testphase-tikz}

%</latex-lab>
%    \end{macrocode}
% \end{implementation}

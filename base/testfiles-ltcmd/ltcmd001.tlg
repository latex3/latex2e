This is a generated file for the LaTeX2e validation system.
Don't change this file in any respect.
Author: Joseph Wright, Frank Mittelbach, Bruno Le Floch
============================================================
TEST 1: Checking for existing definitions
============================================================
! LaTeX cmd Error: Command '\foo' already defined.
For immediate help type H <return>.
 ...                                              
l. ...}
You have used \NewDocumentCommand with a command that already has a
definition.
The existing definition of '\foo' will not be altered.
! LaTeX cmd Error: Command '\foo' undefined.
For immediate help type H <return>.
 ...                                              
l. ...}
You have used \RenewDocumentCommand with a command that was never defined.
LaTeX will ignore this entire definition.
> \foo=\protected macro:->\__cmd_start_optimized: \foo code .
<recently read> }
l. ...}
> \foo code=\protected macro:->First definition.
<recently read> }
l. ...}
============================================================
============================================================
TEST 2: Commands with simple mandatory arguments
============================================================
> \foo=\protected macro:->\__cmd_start_optimized: \foo code .
<recently read> }
l. ...}
> \foo code=\protected macro:#1->(#1).
<recently read> }
l. ...}
> \foo=\protected macro:->\__cmd_start_optimized: \foo code .
<recently read> }
l. ...}
> \foo code=\protected macro:#1#2->(#1)(#2).
<recently read> }
l. ...}
> \foo=\protected macro:->\__cmd_start_optimized: \foo code .
<recently read> }
l. ...}
> \foo code=\protected macro:#1#2#3->(#1)(#2)(#3).
<recently read> }
l. ...}
> \foo=\protected macro:->\__cmd_start_optimized: \foo code .
<recently read> }
l. ...}
> \foo code=\protected macro:#1#2#3#4->(#1)(#2)(#3)(#4).
<recently read> }
l. ...}
> \foo=\protected macro:->\__cmd_start_optimized: \foo code .
<recently read> }
l. ...}
> \foo code=\protected macro:#1#2#3#4#5->(#1)(#2)(#3)(#4)(#5).
<recently read> }
l. ...}
> \foo=\protected macro:->\__cmd_start_optimized: \foo code .
<recently read> }
l. ...}
> \foo code=\protected macro:#1#2#3#4#5#6->(#1)(#2)(#3)(#4)(#5)(#6).
<recently read> }
l. ...}
> \foo=\protected macro:->\__cmd_start_optimized: \foo code .
<recently read> }
l. ...}
> \foo code=\protected macro:#1#2#3#4#5#6#7->(#1)(#2)(#3)(#4)(#5)(#6)(#7).
<recently read> }
l. ...}
> \foo=\protected macro:->\__cmd_start_optimized: \foo code .
<recently read> }
l. ...}
> \foo code=\protected
macro:#1#2#3#4#5#6#7#8->(#1)(#2)(#3)(#4)(#5)(#6)(#7)(#8).
<recently read> }
l. ...}
> \foo=\protected macro:->\__cmd_start_optimized: \foo code .
<recently read> }
l. ...}
> \foo code=\protected
macro:#1#2#3#4#5#6#7#8#9->(#1)(#2)(#3)(#4)(#5)(#6)(#7)(#8)(#9).
<recently read> }
l. ...}
============================================================
============================================================
TEST 3: Command with too many arguments
============================================================
! LaTeX cmd Error: Too many arguments for command '\foo'.
For immediate help type H <return>.
 ...                                              
l. ...}
The argument specification 'mmmmmmmmmm' asks for more than 9 arguments. This
cannot be implemented.
LaTeX will ignore this entire definition.
> \foo=undefined.
<recently read> }
l. ...}
> \foo code=undefined.
<recently read> }
l. ...}
============================================================
============================================================
TEST 4: Commands with one long mandatory argument
============================================================
> \foo=\protected macro:->\__cmd_start_optimized: \foo code .
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1->(#1).
<recently read> }
l. ...}
> \foo=\protected macro:->\__cmd_start_expandable:nNNNNn {m+m}\foo  \foo  
\foo code ?{\__cmd_expandable_grab_m:w \__cmd_expandable_grab_m_long:w }.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2->(#1)(#2).
<recently read> }
l. ...}
> \foo=\protected macro:->\__cmd_start_expandable:nNNNNn {mm+m}\foo  \foo  
\foo code ?{\__cmd_expandable_grab_m:w \__cmd_expandable_grab_m:w
\__cmd_expandable_grab_m_long:w }.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3->(#1)(#2)(#3).
<recently read> }
l. ...}
> \foo=\protected macro:->\__cmd_start_expandable:nNNNNn {mmm+m}\foo  \foo  
\foo code ?{\__cmd_expandable_grab_m:w \__cmd_expandable_grab_m:w
\__cmd_expandable_grab_m:w \__cmd_expandable_grab_m_long:w }.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3#4->(#1)(#2)(#3)(#4).
<recently read> }
l. ...}
> \foo=\protected macro:->\__cmd_start_expandable:nNNNNn {mmmm+m}\foo  \foo  
\foo code ?{\__cmd_expandable_grab_m:w \__cmd_expandable_grab_m:w
\__cmd_expandable_grab_m:w \__cmd_expandable_grab_m:w
\__cmd_expandable_grab_m_long:w }.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3#4#5->(#1)(#2)(#3)(#4)(#5).
<recently read> }
l. ...}
> \foo=\protected macro:->\__cmd_start_expandable:nNNNNn {mmmmm+m}\foo  \foo  
\foo code ?{\__cmd_expandable_grab_m:w \__cmd_expandable_grab_m:w
\__cmd_expandable_grab_m:w \__cmd_expandable_grab_m:w
\__cmd_expandable_grab_m:w \__cmd_expandable_grab_m_long:w }.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3#4#5#6->(#1)(#2)(#3)(#4)(#5)(#6).
<recently read> }
l. ...}
> \foo=\protected macro:->\__cmd_start_expandable:nNNNNn {mmmmmm+m}\foo  \foo 
 \foo code ?{\__cmd_expandable_grab_m:w \__cmd_expandable_grab_m:w
\__cmd_expandable_grab_m:w \__cmd_expandable_grab_m:w
\__cmd_expandable_grab_m:w \__cmd_expandable_grab_m:w
\__cmd_expandable_grab_m_long:w }.
<recently read> }
l. ...}
> \foo code=\protected\long
macro:#1#2#3#4#5#6#7->(#1)(#2)(#3)(#4)(#5)(#6)(#7).
<recently read> }
l. ...}
> \foo=\protected macro:->\__cmd_start_expandable:nNNNNn {mmmmmmm+m}\foo  \foo
  \foo code ?{\__cmd_expandable_grab_m:w \__cmd_expandable_grab_m:w
\__cmd_expandable_grab_m:w \__cmd_expandable_grab_m:w
\__cmd_expandable_grab_m:w \__cmd_expandable_grab_m:w
\__cmd_expandable_grab_m:w \__cmd_expandable_grab_m_long:w }.
<recently read> }
l. ...}
> \foo code=\protected\long
macro:#1#2#3#4#5#6#7#8->(#1)(#2)(#3)(#4)(#5)(#6)(#7)(#8).
<recently read> }
l. ...}
> \foo=\protected macro:->\__cmd_start_expandable:nNNNNn {mmmmmmmm+m}\foo 
\foo   \foo code ?{\__cmd_expandable_grab_m:w \__cmd_expandable_grab_m:w
\__cmd_expandable_grab_m:w \__cmd_expandable_grab_m:w
\__cmd_expandable_grab_m:w \__cmd_expandable_grab_m:w
\__cmd_expandable_grab_m:w \__cmd_expandable_grab_m:w
\__cmd_expandable_grab_m_long:w }.
<recently read> }
l. ...}
> \foo code=\protected\long
macro:#1#2#3#4#5#6#7#8#9->(#1)(#2)(#3)(#4)(#5)(#6)(#7)(#8)(#9).
<recently read> }
l. ...}
============================================================
============================================================
TEST 5: Commands with one processed mandatory argument
============================================================
> \foo=\protected macro:->\__cmd_start:nNNnnn {>{\foo }m}\foo  \foo code
{\__cmd_grab_m:w }{}{{{\foo }}}.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1->(#1).
<recently read> }
l. ...}
> \foo=\protected macro:->\__cmd_start:nNNnnn {m>{\foo }m}\foo  \foo code
{\__cmd_grab_m_1:w \__cmd_grab_m:w }{}{{}{{\foo }}}.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2->(#1)(#2).
<recently read> }
l. ...}
> \foo=\protected macro:->\__cmd_start:nNNnnn {mm>{\foo }m}\foo  \foo code
{\__cmd_grab_m_2:w \__cmd_grab_m:w }{}{{}{}{{\foo }}}.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3->(#1)(#2)(#3).
<recently read> }
l. ...}
> \foo=\protected macro:->\__cmd_start:nNNnnn {mmm>{\foo }m}\foo  \foo code
{\__cmd_grab_m_3:w \__cmd_grab_m:w }{}{{}{}{}{{\foo }}}.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3#4->(#1)(#2)(#3)(#4).
<recently read> }
l. ...}
> \foo=\protected macro:->\__cmd_start:nNNnnn {mmmm>{\foo }m}\foo  \foo code
{\__cmd_grab_m_4:w \__cmd_grab_m:w }{}{{}{}{}{}{{\foo }}}.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3#4#5->(#1)(#2)(#3)(#4)(#5).
<recently read> }
l. ...}
> \foo=\protected macro:->\__cmd_start:nNNnnn {mmmmm>{\foo }m}\foo  \foo code
{\__cmd_grab_m_5:w \__cmd_grab_m:w }{}{{}{}{}{}{}{{\foo }}}.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3#4#5#6->(#1)(#2)(#3)(#4)(#5)(#6).
<recently read> }
l. ...}
> \foo=\protected macro:->\__cmd_start:nNNnnn {mmmmmm>{\foo }m}\foo  \foo code
{\__cmd_grab_m_6:w \__cmd_grab_m:w }{}{{}{}{}{}{}{}{{\foo }}}.
<recently read> }
l. ...}
> \foo code=\protected\long
macro:#1#2#3#4#5#6#7->(#1)(#2)(#3)(#4)(#5)(#6)(#7).
<recently read> }
l. ...}
> \foo=\protected macro:->\__cmd_start:nNNnnn {mmmmmmm>{\foo }m}\foo  \foo
code {\__cmd_grab_m_7:w \__cmd_grab_m:w }{}{{}{}{}{}{}{}{}{{\foo }}}.
<recently read> }
l. ...}
> \foo code=\protected\long
macro:#1#2#3#4#5#6#7#8->(#1)(#2)(#3)(#4)(#5)(#6)(#7)(#8).
<recently read> }
l. ...}
> \foo=\protected macro:->\__cmd_start:nNNnnn {mmmmmmmm>{\foo }m}\foo  \foo
code {\__cmd_grab_m_8:w \__cmd_grab_m:w }{}{{}{}{}{}{}{}{}{}{{\foo }}}.
<recently read> }
l. ...}
> \foo code=\protected\long
macro:#1#2#3#4#5#6#7#8#9->(#1)(#2)(#3)(#4)(#5)(#6)(#7)(#8)(#9).
<recently read> }
l. ...}
============================================================
============================================================
TEST 6: Optional argument creation
============================================================
> \foo=\protected macro:->\__cmd_start:nNNnnn {som}\foo  \foo code
{\__cmd_grab_t:w *\__cmd_grab_D:w []\__cmd_grab_m_1:w }{}{}.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3->(#1)(#2)(#3).
<recently read> }
l. ...}
> \foo=\protected macro:->\__cmd_start:nNNnnn {t+d()+m}\foo  \foo code
{\__cmd_grab_t:w +\__cmd_grab_D:w ()\__cmd_grab_m_long:w }{}{}.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3->(#1)(#2)(#3).
<recently read> }
l. ...}
> \foo=\protected macro:->\__cmd_start:nNNnnn {+t\par O{default}mmm}\foo  \foo
code {\__cmd_grab_t:w \par \__cmd_grab_D:w []\__cmd_grab_m_3:w }{\c_novalue_tl
{\prg_do_nothing: default}\c_novalue_tl \c_novalue_tl \c_novalue_tl }{}.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3#4#5->(#1)(#2)(#3)(#4).
<recently read> }
l. ...}
> \foo=\protected macro:->\__cmd_start:nNNnnn {momo}\foo  \foo code
{\__cmd_grab_m_1:w \__cmd_grab_D:w []\__cmd_grab_m_1:w \__cmd_grab_D:w
[]}{}{}.
<recently read> }
l. ...}
> \foo code=\protected\long macro:#1#2#3#4->(#1)(#2)(#3)(#4).
<recently read> }
l. ...}
============================================================
============================================================
TEST 7: Unknown argument types
============================================================
! LaTeX cmd Error: Invalid argument type 'n' in command '\foo'.
For immediate help type H <return>.
 ...                                              
l. ...}
The letter 'n' does not specify a known argument type.
LaTeX will ignore this entire definition.
> \foo=undefined.
<recently read> }
l. ...}
> \foo code=undefined.
<recently read> }
l. ...}
! LaTeX cmd Error: Invalid argument type 'a' in command '\foo'.
For immediate help type H <return>.
 ...                                              
l. ...}
The letter 'a' does not specify a known argument type.
LaTeX will ignore this entire definition.
> \foo=undefined.
<recently read> }
l. ...}
> \foo code=undefined.
<recently read> }
l. ...}
============================================================
============================================================
TEST 8: Some valid expandable functions
============================================================
> \foo=macro:->\__cmd_start_optimized: \foo code .
<recently read> }
l. ...}
> \foo code=macro:#1->(#1).
<recently read> }
l. ...}
> \foo=macro:->\__cmd_start_optimized: \foo code .
<recently read> }
l. ...}
> \foo code=\long macro:#1->(#1).
<recently read> }
l. ...}
> \foo=macro:->\__cmd_start_optimized: \foo code .
<recently read> }
l. ...}
> \foo code=macro:#1#2#3->(#1)(#2)(#3).
<recently read> }
l. ...}
> \foo=macro:->\__cmd_start_expandable:nNNNNn {om}\foo  \foo  \foo code
?{\__cmd_expandable_grab_D:w \foo (arg 1) []\__cmd_expandable_grab_m:w }.
<recently read> }
l. ...}
> \foo code=\long macro:#1#2->(#1)(#2).
<recently read> }
l. ...}
> \foo=macro:->\__cmd_start_expandable:nNNNNn {+o+m}\foo  \foo  \foo code
?{\__cmd_expandable_grab_D:w \foo (arg 1) []\__cmd_expandable_grab_m_long:w }.
<recently read> }
l. ...}
> \foo code=\long macro:#1#2->(#1)(#2).
<recently read> }
l. ...}
> \foo=macro:->\__cmd_start_expandable:nNNNNn {sm}\foo  \foo  \foo code
?{\__cmd_expandable_grab_t:w \__cmd_grabber_*:w *\__cmd_expandable_grab_m:w }.
<recently read> }
l. ...}
> \foo code=\long macro:#1#2->(#1)(#2).
<recently read> }
l. ...}
> \foo=macro:->\__cmd_start_expandable:nNNNNn {osm}\foo  \foo  \foo code
?{\__cmd_expandable_grab_D:w \foo (arg 1) []\__cmd_expandable_grab_t:w
\__cmd_grabber_*:w *\__cmd_expandable_grab_m:w }.
<recently read> }
l. ...}
> \foo code=\long macro:#1#2#3->(#1)(#2)(#3).
<recently read> }
l. ...}
============================================================
============================================================
TEST 9: Not valid as expandable functions
============================================================
! LaTeX cmd Error: Bad argument specification 'mo' for \foo.
For immediate help type H <return>.
 ...                                              
l. ...}
Expandable commands must have a final mandatory argument (or no arguments at
all). You cannot have a terminal optional argument with expandable commands.
> \foo=undefined.
<recently read> }
l. ...}
> \foo code=undefined.
<recently read> }
l. ...}
! LaTeX cmd Error: Invalid argument prefix '+' in command '\foo'.
For immediate help type H <return>.
 ...                                              
l. ...}
The arguments for an expandable command must not involve short arguments after
long arguments. You have tried to mix the two types when defining '\foo'.
> \foo=undefined.
<recently read> }
l. ...}
> \foo code=undefined.
<recently read> }
l. ...}
> \foo=macro:->\__cmd_start_expandable:nNNNNn {o+m}\foo  \foo   \foo code
?{\__cmd_expandable_grab_D:w \foo (arg 1) []\__cmd_expandable_grab_m_long:w }.
<recently read> }
l. ...}
> \foo code=\long macro:#1#2->(#1)(#2).
<recently read> }
l. ...}
LaTeX cmd Warning: The command '\foo' was undefined but not the associated
(cmd)              commands '\foo code' and/or '\foo defaults'. Maybe you
(cmd)              tried using \let. This may lead to an infinite loop.
! LaTeX cmd Error: Bad argument specification 'r()o' for \foo.
For immediate help type H <return>.
 ...                                              
l. ...}
Expandable commands must have a final mandatory argument (or no arguments at
all). You cannot have a terminal optional argument with expandable commands.
> \foo=undefined.
<recently read> }
l. ...}
> \foo code=\long macro:#1#2->(#1)(#2).
<recently read> }
l. ...}
============================================================
============================================================
TEST 10: Checking for existing environments
============================================================
! LaTeX cmd Error: Environment 'foo' already defined.
For immediate help type H <return>.
 ...                                              
l. ...}
You have used \NewDocumentEnvironment with an environment that already has a
definition.
The existing definition of 'foo' will not be altered.
! LaTeX cmd Error: Environment 'foo' undefined.
For immediate help type H <return>.
 ...                                              
l. ...}
You have used \RenewDocumentEnvironment with an environment that was never
defined.
LaTeX will ignore this entire definition.
> \environment foo=\protected macro:->\__cmd_start_env:nnnnn {}{foo}{}{}{}.
<recently read> }
l. ...}
> \environment foo code=\protected\long macro:->First.
<recently read> }
l. ...}
============================================================
============================================================
TEST 11: Valid environment declarations
============================================================
> \environment foo=\protected macro:->\__cmd_start_env:nnnnn
{mmm}{foo}{\__cmd_grab_m_3:w }{}{}.
<recently read> }
l. ...}
> \environment foo code=\protected\long macro:#1#2#3->(#1)(#2)(#3).
<recently read> }
l. ...}
> \environment foo=\protected macro:->\__cmd_start_env:nnnnn
{som}{foo}{\__cmd_grab_t:w *\__cmd_grab_D:w []\__cmd_grab_m_1:w }{}{}.
<recently read> }
l. ...}
> \environment foo code=\protected\long macro:#1#2#3->(#1)(#2)(#3).
<recently read> }
l. ...}
> \environment foo=\protected macro:->\__cmd_start_env:nnnnn
{so+m}{foo}{\__cmd_grab_t:w *\__cmd_grab_D:w []\__cmd_grab_m_long:w }{}{}.
<recently read> }
l. ...}
> \environment foo code=\protected\long macro:#1#2#3->(#1)(#2)(#3).
<recently read> }
l. ...}
> \environment foo=\protected macro:->\__cmd_start_env:nnnnn
{moo}{foo}{\__cmd_grab_m_1:w \__cmd_grab_D:w []\__cmd_grab_D:w []}{}{}.
<recently read> }
l. ...}
> \environment foo code=\protected\long macro:#1#2#3->(#1)(#2)(#3).
<recently read> }
l. ...}
! LaTeX cmd Error: End of environment 'graf' already defined.
For immediate help type H <return>.
 ...                                              
l. ...}
You have used \NewDocumentEnvironment with an environment that already has a
definition for 'endgraf'.
The existing definition of 'graf' will not be altered.
============================================================
============================================================
TEST 12: Environment groups: should show "outside" and 1
============================================================
> \l_test_tl=outside.
<recently read> }
l. ...}
> \currentgrouplevel=1.
<recently read> }
l. ...}
> \l_test_tl=outside.
<recently read> }
l. ...}
> \currentgrouplevel=1.
<recently read> }
l. ...}
> \l_test_tl=outside.
<recently read> }
l. ...}
> \currentgrouplevel=1.
<recently read> }
l. ...}
============================================================
============================================================
TEST 13: Passing args to end of environments: display correct args
============================================================
> (A).
<recently read> }
l. ...}
> (A)(B).
<recently read> }
l. ...}
> (A)(B)(C).
<recently read> }
l. ...}
> (A)(-NoValue-)(-NoValue-).
<recently read> }
l. ...}
============================================================
============================================================
TEST 14: Nested environments
============================================================
> \@currenvir=foo.
<recently read> }
l. ...}
> \@currenvir=document.
<recently read> }
l. ...}
============================================================
============================================================
TEST 15: Passing arguments to the end with more complex cases
============================================================
> \box...=
\hbox(6.94444+1.94444)x142.50034
.\OT1/cmr/m/n/10 s
.\OT1/cmr/m/n/10 t
.\OT1/cmr/m/n/10 a
.\OT1/cmr/m/n/10 r
.\OT1/cmr/m/n/10 t
.\OT1/cmr/m/n/10 m
.\OT1/cmr/m/n/10 i
.\OT1/cmr/m/n/10 d
.\OT1/cmr/m/n/10 d
.\OT1/cmr/m/n/10 l
.\OT1/cmr/m/n/10 e
.\OT1/cmr/m/n/10 s
.\OT1/cmr/m/n/10 t
.\OT1/cmr/m/n/10 o
.\OT1/cmr/m/n/10 p
.\OT1/cmr/m/n/10 !
.\OT1/cmr/m/n/10 s
.\OT1/cmr/m/n/10 t
.\OT1/cmr/m/n/10 a
.\OT1/cmr/m/n/10 r
.\OT1/cmr/m/n/10 t
.\OT1/cmr/m/n/10 m
.\OT1/cmr/m/n/10 i
.\OT1/cmr/m/n/10 d
.\OT1/cmr/m/n/10 d
.\OT1/cmr/m/n/10 l
.\OT1/cmr/m/n/10 e
.\OT1/cmr/m/n/10 s
.\OT1/cmr/m/n/10 t
.\OT1/cmr/m/n/10 o
.\OT1/cmr/m/n/10 p
.\OT1/cmr/m/n/10 !
! OK.
<argument> \l_tmpa_box 
l. ...  }
============================================================
============================================================
TEST 16: Expansion at end of environment
============================================================
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <7> on input line ....
LaTeX Font Info:    External font `cmex10' loaded for size
(Font)              <5> on input line ....
> \box...=
\hbox(8.5+3.5)x58.44461
.\hbox(8.5+3.5)x29.2223
..\mathon
..\vbox(8.5+3.5)x29.2223
...\rule(0.0+0.0)x29.2223
...\hbox(8.39996+3.60004)x29.2223
....\glue(\tabskip) 0.0
....\hbox(8.39996+3.60004)x18.66669
.....\rule(8.39996+3.60004)x0.0
.....\glue 0.0
.....\glue 0.0 plus 1.0fil
.....\glue 0.00002
.....\OT1/cmr/m/n/10 T
.....\kern-0.83334
.....\OT1/cmr/m/n/10 e
.....\OT1/cmr/m/n/10 s
.....\OT1/cmr/m/n/10 t
.....\glue 0.0 plus 1.0fil
.....\glue 0.0
....\glue(\tabskip) 0.0
....\hbox(8.39996+3.60004)x5.00003
.....\glue 0.0
.....\glue 0.0 plus 1.0fil
.....\glue 0.00002
.....\OT1/cmr/m/n/10 a
.....\glue 0.0 plus 1.0fil
.....\glue 0.0
....\glue(\tabskip) 0.0
....\hbox(8.39996+3.60004)x5.55559
.....\glue 0.0
.....\glue 0.0 plus 1.0fil
.....\glue 0.00002
.....\OT1/cmr/m/n/10 b
.....\glue 0.0 plus 1.0fil
.....\glue 0.0
....\glue(\tabskip) 0.0
...\rule(0.0+0.0)x29.2223
..\mathoff
.\hbox(8.5+3.5)x29.2223
..\mathon
..\vbox(8.5+3.5)x29.2223
...\rule(0.0+0.0)x29.2223
...\hbox(8.39996+3.60004)x29.2223
....\glue(\tabskip) 0.0
....\hbox(8.39996+3.60004)x18.66669
.....\rule(8.39996+3.60004)x0.0
.....\glue 0.0
.....\glue 0.0 plus 1.0fil
.....\glue 0.00002
.....\OT1/cmr/m/n/10 T
.....\kern-0.83334
.....\OT1/cmr/m/n/10 e
.....\OT1/cmr/m/n/10 s
.....\OT1/cmr/m/n/10 t
.....\glue 0.0 plus 1.0fil
.....\glue 0.0
....\glue(\tabskip) 0.0
....\hbox(8.39996+3.60004)x5.00003
.....\glue 0.0
.....\glue 0.0 plus 1.0fil
.....\glue 0.00002
.....\OT1/cmr/m/n/10 a
.....\glue 0.0 plus 1.0fil
.....\glue 0.0
....\glue(\tabskip) 0.0
....\hbox(8.39996+3.60004)x5.55559
.....\glue 0.0
.....\glue 0.0 plus 1.0fil
.....\glue 0.00002
.....\OT1/cmr/m/n/10 b
.....\glue 0.0 plus 1.0fil
.....\glue 0.0
....\glue(\tabskip) 0.0
...\rule(0.0+0.0)x29.2223
..\mathoff
! OK.
<argument> \l_tmpa_box 
l. ...  }
============================================================
============================================================
TEST 17: (ab)using xparse commands in csnames
============================================================
\test-abc-def 
! Missing \endcsname inserted.
<to be read again> 
                   \xparse function is not expandable 
l. ...  }
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.
\test- \xparse function is not expandable \bool_set_false:N \l__cmd_environment_bool \__cmd_start_aux:NNnnnn \foo  \foo code {D...}{\__cmd_grab_D:w ..}{{.}}{}....\cs_end: 
! Missing \endcsname inserted.
<to be read again> 
                   \xparse function is not expandable 
l. ...  }
The control sequence marked <to be read again> should
not appear between \csname and \endcsname.
\test- \xparse function is not expandable \relax \bool_set_false:N \l__cmd_environment_bool \__cmd_start_aux:NNnnnn \foo  \foo code {D...}{\__cmd_grab_D:w ..}{{.}}{}....\cs_end: 
============================================================
============================================================
TEST 18: Checking for existing expandable definitions
============================================================
! LaTeX cmd Error: Command '\foo' already defined.
For immediate help type H <return>.
 ...                                              
l. ...}
You have used \NewExpandableDocumentCommand with a command that already has a
definition.
The existing definition of '\foo' will not be altered.
! LaTeX cmd Error: Command '\foo' undefined.
For immediate help type H <return>.
 ...                                              
l. ...}
You have used \RenewExpandableDocumentCommand with a command that was never
defined.
LaTeX will ignore this entire definition.
> \foo=macro:->\__cmd_start_optimized: \foo code .
<recently read> }
l. ...}
> \foo code=macro:->First definition.
<recently read> }
l. ...}
============================================================

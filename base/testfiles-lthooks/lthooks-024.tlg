This is a generated file for the l3build validation system.
Don't change this file in any respect.
! Use of \??? doesn't match its definition.
<argument> \???  
                 ! LaTeX hooks Error: Empty code label on line .... Using 'to...
l. ...\testme{top-level}
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.
! Use of \??? doesn't match its definition.
<argument> \???  
                 ! LaTeX hooks Error: Empty code label on line .... Using 'to...
l. ...\testme{top-level}
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.
-> The hook 'foo':
> Code chunks:
>     .. -> ..
>     ../ -> ../
>     / -> /
>     // -> //
>     top-level/ -> top-level/
>     /./ -> /./
>     .x -> .x
>     /.x -> /.x
>     .x/ -> .x/
>     top-level/foo -> top-level/foo
>     top-level/foo/ -> top-level/foo/
>     /./foo -> /./foo
> Document-level (top-level) code (executed last):
>     -> top-leveltop-leveltop-level
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     .., ../, /, //, top-level/, /./, .x, /.x, .x/, top-level/foo, top-level/foo/, /./foo.
! Use of \??? doesn't match its definition.
<argument> \???  
                 ! LaTeX hooks Error: Empty code label on line .... Using 'pk...
l. ...  \testme{pkg}
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.
! Use of \??? doesn't match its definition.
<argument> \???  
                 ! LaTeX hooks Error: Empty code label on line .... Using 'pk...
l. ...  \testme{pkg}
If you say, e.g., `\def\a1{...}', then you must always
put `1' after `\a', since control sequence names are
made up of letters only. The macro here has not been
followed by the required stuff, so I'm ignoring it.
-> The hook 'foo':
> Code chunks:
>     pkg -> top-leveltop-levelpkg
>     .. -> ..
>     ../ -> ../
>     / -> /
>     // -> //
>     pkg/ -> pkg/
>     /./ -> /./
>     .x -> .x
>     /.x -> /.x
>     .x/ -> .x/
>     pkg/foo -> pkg/foo
>     pkg/foo/ -> pkg/foo/
>     /./foo -> /./foo
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     pkg, .., ../, /, //, pkg/, /./, .x, /.x, .x/, pkg/foo, pkg/foo/, /./foo.
-> The hook 'foo':
> Code chunks:
>     top-level/foo -> top-level/foo
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     top-level/foo.
(lthooks-024-pkgA.sty
-> The hook 'foo':
> Code chunks:
>     pkgA/foo -> pkgA/foo
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     pkgA/foo.
(lthooks-024-pkgB.sty
-> The hook 'foo':
> Code chunks:
>     lthooks-024-pkgB/foo -> lthooks-024-pkgB/foo
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     lthooks-024-pkgB/foo.
(lthooks-024-pkgC.sty
-> The hook 'foo':
> Code chunks:
>     pkgC/foo -> pkgC/foo
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     pkgC/foo.
)
-> The hook 'foo':
> Code chunks:
>     lthooks-024-pkgB/foo -> lthooks-024-pkgB/foo
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     lthooks-024-pkgB/foo.
)
-> The hook 'foo':
> Code chunks:
>     pkgA/foo -> pkgA/foo
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     pkgA/foo.
)
-> The hook 'foo':
> Code chunks:
>     top-level/foo -> top-level/foo
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     top-level/foo.
-> The hook 'foo':
> Code chunks:
>     my-document/foo -> my-document/foo
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     my-document/foo.
(lthooks-024-pkgA.sty
-> The hook 'foo':
> Code chunks:
>     pkgA/foo -> pkgA/foo
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     pkgA/foo.
(lthooks-024-pkgB.sty
-> The hook 'foo':
> Code chunks:
>     lthooks-024-pkgB/foo -> lthooks-024-pkgB/foo
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     lthooks-024-pkgB/foo.
(lthooks-024-pkgC.sty
-> The hook 'foo':
> Code chunks:
>     pkgC/foo -> pkgC/foo
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     pkgC/foo.
)
-> The hook 'foo':
> Code chunks:
>     lthooks-024-pkgB/foo -> lthooks-024-pkgB/foo
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     lthooks-024-pkgB/foo.
)
-> The hook 'foo':
> Code chunks:
>     pkgA/foo -> pkgA/foo
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     pkgA/foo.
)
-> The hook 'foo':
> Code chunks:
>     my-document/foo -> my-document/foo
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     my-document/foo.

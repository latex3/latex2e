This is a generated file for the l3build validation system.
Don't change this file in any respect.
-> The hook 'cmdfoobefore':
> The hook is not declared.
> Code chunks:
>     X -> \typeout {[foo/before] (#1)}
> Document-level (top-level) code:
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     Not set because the hook is undeclared.
<recently read> }
l. ...\ShowHook{cmdfoobefore}
-> The generic hook 'cmd/foo/before' (unknown arguments):
> Code chunks:
>     X -> \typeout {[foo/before] (#1)}\typeout {[foo/before/2] (#1)}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     X.
<recently read> }
l. ...\ShowHook{cmd/foo/before}
                               % (unknown arguments)
> \bar=macro:
#1->\typeout {[bar/body] (#1)}.
l. ...\show\bar
-> The generic hook 'cmd/bar/before' (unknown arguments):
> Code chunks:
>     X -> \typeout {[bar/before] (#1)}\typeout {[bar/before/2] (#1)}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     X.
<recently read> }
l. ...\ShowHook{cmd/bar/before}
                               % (unknown arguments)
-> The generic hook 'cmd/bar/after' (unknown arguments):
> Code chunks:
>     X -> \typeout {[bar/after] (#2)}\typeout {[bar/after/2] (#2)}
> Document-level (top-level) code (executed first):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order (after reversal):
>     X.
<recently read> }
l. ...\ShowHook{cmd/bar/after}
                              % (unknown arguments)
! Illegal parameter number in definition of hook 'cmd/bar/after'.
(hooks)             Offending label: 'X'.
<to be read again> 
                   2
l. ......e __hook_cmd_begindocument_code:\endcsname
                                                   % \begin{document}
You meant to type ## instead of #, right?
Or maybe a } was forgotten somewhere earlier, and things
are all screwed up? I'm going to assume that you meant ##.
! Illegal parameter number in definition of hook 'cmd/bar/after'.
(hooks)             Offending label: 'X'.
<to be read again> 
                   2
l. ......e __hook_cmd_begindocument_code:\endcsname
                                                   % \begin{document}
You meant to type ## instead of #, right?
Or maybe a } was forgotten somewhere earlier, and things
are all screwed up? I'm going to assume that you meant ##.
-> The hook 'cmdfoobefore':
> The hook is not declared.
> Code chunks:
>     X -> \typeout {[foo/before] (#1)}
> Document-level (top-level) code:
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     Not set because the hook is undeclared.
<recently read> }
l. ...\ShowHook{cmdfoobefore}
-> The generic hook 'cmd/foo/before' (unknown arguments):
> Code chunks:
>     X -> \typeout {[foo/before] (#1)}\typeout {[foo/before/2] (#1)}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     X.
<recently read> }
l. ...\ShowHook{cmd/foo/before}
                               % (9 arguments)
> \bar=macro:
#1->\UseHookWithArguments {cmd/bar/before}{1}{#1}\typeout {[bar/body] (#1)}\UseHookWithArguments {cmd/bar/after}{1}{#1}.
l. ...\show\bar
-> The generic hook 'cmd/bar/before' (1 argument):
> Code chunks:
>     X -> \typeout {[bar/before] (#1)}\typeout {[bar/before/2] (#1)}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     X.
<recently read> }
l. ...\ShowHook{cmd/bar/before}
                               % (1 argument)
-> The generic hook 'cmd/bar/after' (1 argument):
> Code chunks:
>     X -> \typeout {[bar/after] (##2)}\typeout {[bar/after/2] (##2)}
> Document-level (top-level) code (executed first):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order (after reversal):
>     X.
<recently read> }
l. ...\ShowHook{cmd/bar/after}
                              % (1 argument)
! LaTeX hooks Error: Generic hooks cannot be added to '\Afoo'.
For immediate help type H <return>.
 ...                                              
l. ......o/before}[X]{\typeout{[Afoo/before] (#1)}}
                                                   % error
You tried to add a hook to '\Afoo', but LaTeX was unable to patch the command because it doesn't exist.
! Illegal parameter number in definition of hook 'cmd/Abar/after'.
(hooks)             Invalid code added on line ....
<to be read again> 
                   2
l. ......bar/after}[X]{\typeout{[Abar/after] (#2)}}
                                                   % error
You meant to type ## instead of #, right?
Or maybe a } was forgotten somewhere earlier, and things
are all screwed up? I'm going to assume that you meant ##.
-> The hook 'cmdAfoobefore':
> The hook is not declared.
> Code chunks:
>     X -> \typeout {[Afoo/before] (#1)}
> Document-level (top-level) code:
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     Not set because the hook is undeclared.
<recently read> }
l. ...\ShowHook{cmdAfoobefore}
-> The generic hook 'cmd/Afoo/before' (unknown arguments):
> Code chunks:
>     X -> \typeout {[Afoo/before] (#1)}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     X.
<recently read> }
l. ...\ShowHook{cmd/Afoo/before}
                                % (unknown arguments)
> \Abar=macro:
#1->\UseHookWithArguments {cmd/Abar/before}{1}{#1}\typeout {[Abar/body] (#1)}\UseHookWithArguments {cmd/Abar/after}{1}{#1}.
l. ...\show\Abar
-> The generic hook 'cmd/Abar/before' (1 argument):
> Code chunks:
>     X -> \typeout {[Abar/before] (#1)}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     X.
<recently read> }
l. ...\ShowHook{cmd/Abar/before}
                                % (1 argument)
-> The generic hook 'cmd/Abar/after' (1 argument):
> Code chunks:
>     X -> \typeout {[Abar/after] (##2)}
> Document-level (top-level) code (executed first):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order (after reversal):
>     X.
<recently read> }
l. ...\ShowHook{cmd/Abar/after}
                               % (1 argument)

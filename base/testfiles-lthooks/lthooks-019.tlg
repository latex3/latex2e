This is a generated file for the l3build validation system.
Don't change this file in any respect.
! LaTeX hooks Error: Hook 'yy' has already been declared.
For immediate help type H <return>.
 ...                                              
l. ...\NewReversedHook{yy}
                             % testing double declarations
There already exists a hook declaration with this name.
Please use a different name for your hook.
[lthooks] Add to hook 'xx' (my1) on input line ...
[lthooks]    <- \typeout {A}
[lthooks] Add to hook 'xx' (my1) on input line ...
[lthooks]    <- \typeout {A2}
[lthooks] Add to hook 'xx' (my2) on input line ...
[lthooks]    <- \typeout {B}
[lthooks] Add to hook 'xx' (my3) on input line ...
[lthooks]    <- \typeout {C}
[lthooks] Add to hook 'xx' (my4) on input line ...
[lthooks]    <- \typeout {D}
[lthooks] Add to hook 'xx' (my2) on input line ...
[lthooks]    <- \typeout {B2}
[lthooks] Update code for hook 'xx' on input line ...:
  normal rule my4|my2: < found
Code labels for sorting:
 my1, my2, my3 and my4
Data structure for label rules:
 my1 = 0 -> 
 my2 = 1 -> 
 my3 = 0 -> 
 my4 = 0 -> my2
[lthooks] Handled code for my1
[lthooks] Handled code for my3
[lthooks] Handled code for my4
[lthooks] Handled code for my2
A
A2
C
D
B
B2
[lthooks] Update code for hook 'xx' on input line ...:
  normal rule my4|my2: < found
Code labels for sorting:
 my1, my2, my3 and my4
Data structure for label rules:
 my1 = 0 -> 
 my2 = 1 -> 
 my3 = 0 -> 
 my4 = 0 -> my2
[lthooks] Handled code for my1
[lthooks] Handled code for my3
[lthooks] Handled code for my4
[lthooks] Handled code for my2
-> The hook 'xx':
> Code chunks:
>     my1 -> \typeout {A}\typeout {A2}
>     my2 -> \typeout {B}\typeout {B2}
>     my3 -> \typeout {C}
>     my4 -> \typeout {D}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     my4|my2 with relation <
> Execution order (after applying rules):
>     my1, my3, my4, my2.
Expected output: my1 my3 my4 my2
[lthooks] Add to hook 'yy' (my1) on input line ...
[lthooks]    <- \typeout {A}
[lthooks] Add to hook 'yy' (my1) on input line ...
[lthooks]    <- \typeout {A2}
[lthooks] Add to hook 'yy' (my2) on input line ...
[lthooks]    <- \typeout {B}
[lthooks] Add to hook 'yy' (my3) on input line ...
[lthooks]    <- \typeout {C}
[lthooks] Add to hook 'yy' (my4) on input line ...
[lthooks]    <- \typeout {D}
[lthooks] Add to hook 'yy' (my2) on input line ...
[lthooks]    <- \typeout {B2}
[lthooks] Add to hook 'yy' (my5) on input line ...
[lthooks]    <- \typeout {C alternate}
[lthooks] Update code for hook 'yy' on input line ...:
  normal rule my4|my2: > found
  normal rule my5|my3: -> found
---> Drop 'my3' code from \g__hook_yy_code_prop because of 'my5'
Code labels for sorting:
 my1, my2, my3, my4 and my5
Data structure for label rules:
 my1 = 0 -> 
 my2 = 1 -> 
 my3 = 0 -> 
 my4 = 0 -> my2
 my5 = 0 -> 
[lthooks] Handled code for my1
[lthooks] Handled code for my3
[lthooks] Handled code for my4
[lthooks] Handled code for my5
[lthooks] Handled code for my2
B
B2
C alternate
D
A
A2
[lthooks] Update code for hook 'yy' on input line ...:
  normal rule my4|my2: > found
  normal rule my5|my3: -> found
---> Drop 'my3' code from \g__hook_yy_code_prop because of 'my5'
Code labels for sorting:
 my1, my2, my3, my4 and my5
Data structure for label rules:
 my1 = 0 -> 
 my2 = 1 -> 
 my3 = 0 -> 
 my4 = 0 -> my2
 my5 = 0 -> 
[lthooks] Handled code for my1
[lthooks] Handled code for my3
[lthooks] Handled code for my4
[lthooks] Handled code for my5
[lthooks] Handled code for my2
-> The hook 'yy':
> Code chunks:
>     my1 -> \typeout {A}\typeout {A2}
>     my2 -> \typeout {B}\typeout {B2}
>     my3 -> \typeout {C}
>     my4 -> \typeout {D}
>     my5 -> \typeout {C alternate}
> Document-level (top-level) code (executed first):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     my4|my2 with relation >
>     my5|my3 with relation ->
> Execution order (after reversal and applying rules):
>     my2, my5, my4, my3, my1.
Expected output: my2, my5, my4, my3, my1
[lthooks] Add to hook 'env/quote/before' (top-level) on input line ...
[lthooks]    <- \typeout {before A}
[lthooks] Add to hook 'env/quote/after' (top-level) on input line ...
[lthooks]    <- \typeout {after A}
[lthooks] Add to hook 'env/quote/before' (my1) on input line ...
[lthooks]    <- \typeout {before B}
[lthooks] Add to hook 'env/quote/after' (my1) on input line ...
[lthooks]    <- \typeout {after B}
[lthooks] Add to hook 'env/quote/before' (my2) on input line ...
[lthooks]    <- \typeout {before C}
[lthooks] Add to hook 'env/quote/after' (my2) on input line ...
[lthooks]    <- \typeout {after C}
[lthooks] Add to hook 'env/quote/before' (my3) on input line ...
[lthooks]    <- \typeout {before D}
[lthooks] Add to hook 'env/quote/after' (my3) on input line ...
[lthooks]    <- \typeout {after D}
[lthooks] Update code for hook 'env/quote/before' on input line ...:
 default rule my3|my2: < found
Code labels for sorting:
 my1, my2 and my3
Data structure for label rules:
 my1 = 0 -> 
 my2 = 1 -> 
 my3 = 0 -> my2
[lthooks] Handled code for my1
[lthooks] Handled code for my3
[lthooks] Handled code for my2
before B
before D
before C
before A
[lthooks] Update code for hook 'env/quote/before' on input line ...:
 default rule my3|my2: < found
Code labels for sorting:
 my1, my2 and my3
Data structure for label rules:
 my1 = 0 -> 
 my2 = 1 -> 
 my3 = 0 -> my2
[lthooks] Handled code for my1
[lthooks] Handled code for my3
[lthooks] Handled code for my2
-> The generic hook 'env/quote/before':
> Code chunks:
>     my1 -> \typeout {before B}
>     my2 -> \typeout {before C}
>     my3 -> \typeout {before D}
> Document-level (top-level) code (executed last):
>     -> \typeout {before A}
> Extra code for next invocation:
>     ---
> Rules:
>     my3|my2 with default relation <
> Execution order (after applying rules):
>     my1, my3, my2.
Expected output: my1, my3, my2
[lthooks] Update code for hook 'env/quote/after' on input line ...:
 default rule my3|my2: < found
Code labels for sorting:
 my1, my2 and my3
Data structure for label rules:
 my1 = 0 -> 
 my2 = 1 -> 
 my3 = 0 -> my2
[lthooks] Handled code for my1
[lthooks] Handled code for my3
[lthooks] Handled code for my2
after A
after C
after D
after B
[lthooks] Update code for hook 'env/quote/after' on input line ...:
 default rule my3|my2: < found
Code labels for sorting:
 my1, my2 and my3
Data structure for label rules:
 my1 = 0 -> 
 my2 = 1 -> 
 my3 = 0 -> my2
[lthooks] Handled code for my1
[lthooks] Handled code for my3
[lthooks] Handled code for my2
-> The generic hook 'env/quote/after':
> Code chunks:
>     my1 -> \typeout {after B}
>     my2 -> \typeout {after C}
>     my3 -> \typeout {after D}
> Document-level (top-level) code (executed first):
>     -> \typeout {after A}
> Extra code for next invocation:
>     ---
> Rules:
>     my3|my2 with default relation <
> Execution order (after reversal and applying rules):
>     my2, my3, my1.
Expected output: my2, my3, my1
[lthooks] Add to hook 'Start' (zz1) on input line ...
[lthooks]    <- \typeout {A}
[lthooks] Add to hook 'Start' (zz2) on input line ...
[lthooks]    <- \typeout {B}
[lthooks] Add to hook 'Stop' (zz1) on input line ...
[lthooks]    <- \typeout {A}
[lthooks] Add to hook 'Stop' (zz2) on input line ...
[lthooks]    <- \typeout {B}
[lthooks] Add to hook 'Stop' (zz3) on input line ...
[lthooks]    <- \typeout {C}
[lthooks] Add to hook 'Stop' (zz4) on input line ...
[lthooks]    <- \typeout {D}
[lthooks] Update code for hook 'Start' on input line ...:
Code labels for sorting:
 zz1 and zz2
Data structure for label rules:
 zz1 = 0 -> 
 zz2 = 0 -> 
[lthooks] Handled code for zz1
[lthooks] Handled code for zz2
A
B
[lthooks] Update code for hook 'Stop' on input line ...:
Code labels for sorting:
 zz1, zz2, zz3 and zz4
Data structure for label rules:
 zz1 = 0 -> 
 zz2 = 0 -> 
 zz3 = 0 -> 
 zz4 = 0 -> 
[lthooks] Handled code for zz1
[lthooks] Handled code for zz2
[lthooks] Handled code for zz3
[lthooks] Handled code for zz4
D
C
B
A
[lthooks] Update code for hook 'Start' on input line ...:
Code labels for sorting:
 zz1 and zz2
Data structure for label rules:
 zz1 = 0 -> 
 zz2 = 0 -> 
[lthooks] Handled code for zz1
[lthooks] Handled code for zz2
-> The hook 'Start':
> Code chunks:
>     zz1 -> \typeout {A}
>     zz2 -> \typeout {B}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     zz1, zz2.
[lthooks] Update code for hook 'Stop' on input line ...:
Code labels for sorting:
 zz1, zz2, zz3 and zz4
Data structure for label rules:
 zz1 = 0 -> 
 zz2 = 0 -> 
 zz3 = 0 -> 
 zz4 = 0 -> 
[lthooks] Handled code for zz1
[lthooks] Handled code for zz2
[lthooks] Handled code for zz3
[lthooks] Handled code for zz4
-> The hook 'Stop':
> Code chunks:
>     zz1 -> \typeout {A}
>     zz2 -> \typeout {B}
>     zz3 -> \typeout {C}
>     zz4 -> \typeout {D}
> Document-level (top-level) code (executed first):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order (after reversal):
>     zz4, zz3, zz2, zz1.
[lthooks] Update code for hook 'Stop' on input line ...:
  normal rule zz4|zz3: > found
Code labels for sorting:
 zz1, zz2, zz3 and zz4
Data structure for label rules:
 zz1 = 0 -> 
 zz2 = 0 -> 
 zz3 = 1 -> 
 zz4 = 0 -> zz3
[lthooks] Handled code for zz1
[lthooks] Handled code for zz2
[lthooks] Handled code for zz4
[lthooks] Handled code for zz3
-> The hook 'Stop':
> Code chunks:
>     zz1 -> \typeout {A}
>     zz2 -> \typeout {B}
>     zz3 -> \typeout {C}
>     zz4 -> \typeout {D}
> Document-level (top-level) code (executed first):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     zz4|zz3 with relation >
> Execution order (after reversal and applying rules):
>     zz3, zz4, zz2, zz1.
[lthooks] Update code for hook 'Start' on input line ...:
-> The hook 'Start':
> The hook is empty.
[lthooks] Update code for hook 'Stop' on input line ...:
-> The hook 'Stop':
> The hook is empty.
[lthooks] Add to hook 'Start' (one) on input line ...
[lthooks]    <- \typeout {begin A}
[lthooks] Add to hook 'Start' (one) on input line ...
[lthooks]    <- \typeout {begin B}
[lthooks] Add to hook 'Start' (one) on input line ...
[lthooks]    <- \typeout {begin C}
[lthooks] Add to hook 'Stop' (one) on input line ...
[lthooks]    <- \typeout {end C}
[lthooks] Add to hook 'Stop' (one) on input line ...
[lthooks]    <- \typeout {end B}
[lthooks] Add to hook 'Stop' (one) on input line ...
[lthooks]    <- \typeout {end A}
[lthooks] Update code for hook 'Start' on input line ...:
Code labels for sorting:
 one
Data structure for label rules:
 one = 0 -> 
[lthooks] Handled code for one
begin A
begin B
begin C
[lthooks] Update code for hook 'Stop' on input line ...:
Code labels for sorting:
 one
Data structure for label rules:
 one = 0 -> 
[lthooks] Handled code for one
end C
end B
end A
[lthooks] Update code for hook 'Start' on input line ...:
Code labels for sorting:
 one
Data structure for label rules:
 one = 0 -> 
[lthooks] Handled code for one
-> The hook 'Start':
> Code chunks:
>     one -> \typeout {begin A}\typeout {begin B}\typeout {begin C}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     one.
[lthooks] Update code for hook 'Stop' on input line ...:
Code labels for sorting:
 one
Data structure for label rules:
 one = 0 -> 
[lthooks] Handled code for one
-> The hook 'Stop':
> Code chunks:
>     one -> \typeout {end C}\typeout {end B}\typeout {end A}
> Document-level (top-level) code (executed first):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order (after reversal):
>     one.
[lthooks] Add to hook 'Start' (zz1) on input line ...
[lthooks]    <- \typeout {A}
[lthooks] Add to hook 'Start' (zz2) on input line ...
[lthooks]    <- \typeout {B}
[lthooks] Add to hook 'Start' (zz3) on input line ...
[lthooks]    <- \typeout {C}
[lthooks] Add to hook 'Stop' (zz1) on input line ...
[lthooks]    <- \typeout {A}
[lthooks] Add to hook 'Stop' (zz2) on input line ...
[lthooks]    <- \typeout {B}
[lthooks] Add to hook 'Stop' (zz3) on input line ...
[lthooks]    <- \typeout {C}
[lthooks] Update code for hook 'Start' on input line ...:
 default rule zz2|zz1: < found
 default rule zz3|zz1: > found
Code labels for sorting:
 zz1, zz2 and zz3
Data structure for label rules:
 zz1 = 1 -> zz3
 zz2 = 0 -> zz1
 zz3 = 1 -> 
[lthooks] Handled code for zz2
[lthooks] Handled code for zz1
[lthooks] Handled code for zz3
B
A
C
[lthooks] Update code for hook 'Stop' on input line ...:
 default rule zz2|zz1: < found
 default rule zz3|zz1: > found
Code labels for sorting:
 zz1, zz2 and zz3
Data structure for label rules:
 zz1 = 1 -> zz3
 zz2 = 0 -> zz1
 zz3 = 1 -> 
[lthooks] Handled code for zz2
[lthooks] Handled code for zz1
[lthooks] Handled code for zz3
C
A
B
[lthooks] Update code for hook 'Start' on input line ...:
 default rule zz2|zz1: < found
 default rule zz3|zz1: > found
Code labels for sorting:
 zz1, zz2 and zz3
Data structure for label rules:
 zz1 = 1 -> zz3
 zz2 = 0 -> zz1
 zz3 = 1 -> 
[lthooks] Handled code for zz2
[lthooks] Handled code for zz1
[lthooks] Handled code for zz3
-> The hook 'Start':
> Code chunks:
>     zz1 -> \typeout {A}
>     zz2 -> \typeout {B}
>     zz3 -> \typeout {C}
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     zz2|zz1 with default relation <
>     zz3|zz1 with default relation >
> Execution order (after applying rules):
>     zz2, zz1, zz3.
[lthooks] Update code for hook 'Stop' on input line ...:
 default rule zz2|zz1: < found
 default rule zz3|zz1: > found
Code labels for sorting:
 zz1, zz2 and zz3
Data structure for label rules:
 zz1 = 1 -> zz3
 zz2 = 0 -> zz1
 zz3 = 1 -> 
[lthooks] Handled code for zz2
[lthooks] Handled code for zz1
[lthooks] Handled code for zz3
-> The hook 'Stop':
> Code chunks:
>     zz1 -> \typeout {A}
>     zz2 -> \typeout {B}
>     zz3 -> \typeout {C}
> Document-level (top-level) code (executed first):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     zz2|zz1 with default relation <
>     zz3|zz1 with default relation >
> Execution order (after reversal and applying rules):
>     zz3, zz1, zz2.

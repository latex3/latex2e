
\ExplSyntaxOn
\debug_on:n { check-declarations , deprecation }
\ExplSyntaxOff

\input{regression-test}

\documentclass{minimal}

\START

\makeatletter
\TEST{Add with hooks, but declare without}
  {
    \def\@foohook{\typeout{foo legacy code ##1}}
    \NewHook{foo}
    \ShowHook{foo}
    \UseHook{foo}
    %
    \def\@fooarghook{\typeout{fooarg legacy code ##1}}
    \NewHookWithArguments{fooarg}{1}
    \ShowHook{fooarg}
    \UseHook{fooarg}{ERR}
    %
    \NewHook{bar}
    \def\@barhook{\typeout{bar legacy code ##1}}
    \ShowHook{bar}
    \UseHook{bar}
    %
    \NewHookWithArguments{bararg}{1}
    \def\@bararghook{\typeout{bararg legacy code ##1}}
    \ShowHook{bararg}
    \UseHook{bararg}{ERR}
  }

\OMIT
\begin{document}
\TIMO

\TEST{Two arguments}
  {
    \def\hookname{test-2}
    \NewHookWithArguments{\hookname}{2}
    % top-level
    \AddToHook{\hookname}{\typeout{top-hashes(#1,#2)}}
    \AddToHookWithArguments{\hookname}{\typeout{top-args(#1,#2)}}
    \AddToHook{\hookname}{\typeout{top-hashes(#1,#2)}}
    \AddToHookWithArguments{\hookname}{\typeout{top-args(#1,#2)}}
    % next
    \AddToHookNext{\hookname}{\typeout{next-hashes(#1,#2)}}
    \AddToHookNextWithArguments{\hookname}{\typeout{next-args(#1,#2)}}
    \AddToHookNext{\hookname}{\typeout{next-hashes(#1,#2)}}
    \AddToHookNextWithArguments{\hookname}{\typeout{next-args(#1,#2)}}
    % label
    \AddToHook{\hookname}[label]{\typeout{label-hashes(#1,#2)}}
    \AddToHookWithArguments{\hookname}[label]{\typeout{label-args(#1,#2)}}
    \AddToHook{\hookname}[label]{\typeout{label-hashes(#1,#2)}}
    \AddToHookWithArguments{\hookname}[label]{\typeout{label-args(#1,#2)}}
    %
    \ShowHook{\hookname}
    %
    \UseHook{\hookname}{foo}{bar}
  }

%

\TEST{One argument}
  {
    \def\hookname{test-1}
    \NewHookWithArguments{\hookname}{1}
    % top-level
    \AddToHook{\hookname}{\typeout{top-hashes(#1,#2)}}
    \AddToHookWithArguments{\hookname}{\typeout{top-args(#1,#2)}}
    \AddToHook{\hookname}{\typeout{top-hashes(#1,#2)}}
    \AddToHookWithArguments{\hookname}{\typeout{top-args(#1,#2)}}
    % next
    \AddToHookNext{\hookname}{\typeout{next-hashes(#1,#2)}}
    \AddToHookNextWithArguments{\hookname}{\typeout{next-args(#1,#2)}}
    \AddToHookNext{\hookname}{\typeout{next-hashes(#1,#2)}}
    \AddToHookNextWithArguments{\hookname}{\typeout{next-args(#1,#2)}}
    % label
    \AddToHook{\hookname}[label]{\typeout{label-hashes(#1,#2)}}
    \AddToHookWithArguments{\hookname}[label]{\typeout{label-args(#1,#2)}}
    \AddToHook{\hookname}[label]{\typeout{label-hashes(#1,#2)}}
    \AddToHookWithArguments{\hookname}[label]{\typeout{label-args(#1,#2)}}
    %
    \ShowHook{\hookname}
    %
    \UseHook{\hookname}{foo}
    %
    % Any operation that may change the fast-execution token-list
    % (macro nowadays) will trigger sorting again, and the labeled code
    % stored in the code pool will error all over again about any
    % "Illegal parameter number" added to the code.  Not ideal...
    \DeclareHookRule{\hookname}{foo}{before}{bar}
    \ShowHook{\hookname}
  }

%

\TEST{Zero arguments}
  {
    \def\hookname{test-0}
    \NewHookWithArguments{\hookname}{0}
    % top-level
    \AddToHook{\hookname}{\typeout{top-hashes(#1,#2)}}
    \AddToHookWithArguments{\hookname}{\typeout{top-args(#1,#2)}}
    \AddToHook{\hookname}{\typeout{top-hashes(#1,#2)}}
    \AddToHookWithArguments{\hookname}{\typeout{top-args(#1,#2)}}
    % next
    \AddToHookNext{\hookname}{\typeout{next-hashes(#1,#2)}}
    \AddToHookNextWithArguments{\hookname}{\typeout{next-args(#1,#2)}}
    \AddToHookNext{\hookname}{\typeout{next-hashes(#1,#2)}}
    \AddToHookNextWithArguments{\hookname}{\typeout{next-args(#1,#2)}}
    % label
    \AddToHook{\hookname}[label]{\typeout{label-hashes(#1,#2)}}
    \AddToHookWithArguments{\hookname}[label]{\typeout{label-args(#1,#2)}}
    \AddToHook{\hookname}[label]{\typeout{label-hashes(#1,#2)}}
    \AddToHookWithArguments{\hookname}[label]{\typeout{label-args(#1,#2)}}
    %
    \ShowHook{\hookname}
    %
    \UseHook{\hookname}
  }

%

\TEST{Ten arguments}
  {
    % Too many arguments, then LaTeX defines with zero, then
    % \AddToHookWithArguments complains...  Maybe should define with 9?
    \NewHookWithArguments{test-10}{10}
    \AddToHookWithArguments{test-10}{\typeout{10-top-level(#1,#2)}}
    \AddToHookWithArguments{test-10}[label]{\typeout{10-label(#1,#2)}}
    \AddToHookNextWithArguments{test-10}{\typeout{10-next(#1,#2)}}
    %
    \ShowHook{test-10}
    %
    \UseHook{test-10}{foo}{bar}%
      {3}{4}{5}{6}{7}{8}{9}
  }

%

\TEST{No arguments}
  {
    \NewHook{no-args}
    \AddToHook{no-args}{\typeout{no-top-level(#1,#2)}} % ok, adds ##1, ##2
    \AddToHook{no-args}[label]{\typeout{no-label(#1,#2)}} % ok, adds ##1, ##2
    \AddToHookNext{no-args}{\typeout{no-next(#1,#2)}} % ok, adds ##1, ##2
    
    \AddToHookWithArguments{no-args}{\typeout{no-top-level(#1,#2)}} % error, adds ##1, ##2
    \AddToHookWithArguments{no-args}[label]{\typeout{no-label(#1,#2)}} % error, adds ##1, ##2
    \AddToHookNextWithArguments{no-args}{\typeout{no-next(#1,#2)}} % error, adds ##1, ##2
    \UseHook{no-args}
  }

%

\TEST{One-time hook with arguments}
  {
    \NewHookWithArguments{use-once}{2}
    \AddToHookWithArguments{use-once}{\typeout{once(#1,#2)}}
    %
    \ShowHook{use-once}
    %
    \UseOneTimeHookWithArguments{use-once}{2}{foo}{bar}
    \AddToHookWithArguments{use-once}{\typeout{twice(#1,#2)}}
    %
    \ShowHook{use-once}
  }

%

\TEST{Add with arguments before hook is declared}
  {
    \AddToHookWithArguments{not-declared}{\typeout{top-args(#1,#2)}}
    \AddToHook{not-declared}{\typeout{top-hashes(#1,#2)}}
    \AddToHookWithArguments{not-declared}[label]{\typeout{label-args(#1,#2)}}
    \AddToHook{not-declared}[label]{\typeout{label-hashes(#1,#2)}}
    \AddToHookNextWithArguments{not-declared}{\typeout{next-args(#1,#2)}}
    \AddToHookNext{not-declared}{\typeout{next-hashes(#1,#2)}}
    %
    \ShowHook{not-declared}
    %
    \NewHookWithArguments{not-declared}{2}
    %
    \AddToHookWithArguments{not-declared}{\typeout{top-more-args(#1,#2)}}
    \AddToHook{not-declared}{\typeout{top-more-hashes(#1,#2)}}
    \AddToHookWithArguments{not-declared}[label]{\typeout{label-more-args(#1,#2)}}
    \AddToHook{not-declared}[label]{\typeout{label-more-hashes(#1,#2)}}
    \AddToHookNextWithArguments{not-declared}{\typeout{next-more-args(#1,#2)}}
    \AddToHookNext{not-declared}{\typeout{next-more-hashes(#1,#2)}}
    %
    \ShowHook{not-declared}
    %
    \UseHookWithArguments{not-declared}{2}{foo}{bar}
  }

%

\TEST{Testing with nine arguments}
  {
    \AddToHookWithArguments{not-nine}{\typeout{top-args(#1,#9)}}
    \AddToHook{not-nine}{\typeout{top-hashes(#1,#9)}}
    \AddToHookWithArguments{not-nine}[label]{\typeout{label-args(#1,#9)}}
    \AddToHook{not-nine}[label]{\typeout{label-hashes(#1,#9)}}
    \AddToHookNextWithArguments{not-nine}{\typeout{next-args(#1,#9)}}
    \AddToHookNext{not-nine}{\typeout{next-hashes(#1,#9)}}
    %
    \ShowHook{not-nine}
    %
    \NewHookWithArguments{not-nine}{9}
    %
    \AddToHookWithArguments{not-nine}{\typeout{top-more-args(#1,#9)}}
    \AddToHook{not-nine}{\typeout{top-more-hashes(#1,#9)}}
    \AddToHookWithArguments{not-nine}[label]{\typeout{label-more-args(#1,#9)}}
    \AddToHook{not-nine}[label]{\typeout{label-more-hashes(#1,#9)}}
    \AddToHookNextWithArguments{not-nine}{\typeout{next-more-args(#1,#9)}}
    \AddToHookNext{not-nine}{\typeout{next-more-hashes(#1,#9)}}
    %
    \ShowHook{not-nine}
    %
    \UseHookWithArguments{not-nine}{9}{foo}2345678{bar}
  }

%

\TEST{Add with hooks, but declare without}
  {
    \AddToHookWithArguments{liar}{\typeout{top-arg(#1)}}
    \AddToHookNextWithArguments{liar}{\typeout{next-arg(#1)}}
    \AddToHookWithArguments{liar}[label]{\typeout{label-arg(#1)}}
    \AddToHook{liar}{\typeout{top-hash(#1)}}
    \AddToHookNext{liar}{\typeout{next-hash(#1)}}
    \AddToHook{liar}[label]{\typeout{label-hash(#1)}}
    %
    \ShowHook{liar}
    %
    \NewHook{liar}
    %
    \AddToHook{liar}{\typeout{more-top-hash(#1)}}
    \AddToHookNext{liar}{\typeout{more-next-hash(#1)}}
    \AddToHook{liar}[label]{\typeout{more-label-hash(#1)}}
    %
    \ShowHook{liar}
    %
    \UseHook{liar}
  }

\END

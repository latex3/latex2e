%
% Copyright (C) The LaTeX Project
%

\documentclass{minimal}
\input{regression-test}
\ExplSyntaxOn
\debug_on:n { check-declarations , deprecation , log-functions }
\ExplSyntaxOff

\begin{document}
\START
\AUTHOR{Joseph Wright}
\ExplSyntaxOn

\OMIT
  \NewTemplateType { test } { 0 }
  \DeclareTemplateInterface { test } { std } { 0 }
    {
      dim-a : length    = 10 pt ,
      dim-b : length    = \KeyValue { dim-a } ,
      tl-a  : tokenlist = abc ,
      tl-b  : tokenlist = \KeyValue { tl-a } ,
    }
  \DeclareTemplateCode { test } { std } { 0 }
    {
      dim-a = \l_tmpa_dim ,
      dim-b = \l_tmpb_dim ,
      tl-a  = \l_tmpa_tl ,
      tl-b  = \l_tmpb_tl
    }
    {
      \typeout { \dim_use:N \l_tmpb_dim }
      \typeout { \tl_use:N \l_tmpb_tl }
    }
  \DeclareInstance { test } { run } { std } { }

\TIMO

\TEST { Key~values }
  {
    \UseInstance { test } { run }
    \UseInstance { test } { run }
    \UseInstance { test } { run }
  }

\OMIT

  \DeclareTemplateInterface { test } { std2 } { 0 }
    {
      dim-a : length    = 10 pt ,
      dim-b : length    = \KeyValue { dim-a } ,
      tl-a  : tokenlist = abc ,
      tl-b  : tokenlist = \KeyValue { tl-a } ,
      tl-c  : tokenlist = \KeyValue { tl-a } ,
    }
  \DeclareTemplateCode { test } { std2 } { 0 }
    {
      dim-a = global \g_tmpa_dim ,
      dim-b = \l_tmpb_dim ,
      tl-a  = \l_tmpa_tl ,
      tl-b  = \l_tmpb_tl ,
      tl-c  = \l_tmpa_tl
    }
    {
      \typeout { \dim_use:N \l_tmpb_dim }
      \typeout { \tl_use:N \l_tmpb_tl }
      \typeout { \tl_use:N \l_tmpa_tl }
    }
  \DeclareInstance { test } { run } { std2 } { }

\TIMO

\TEST { Key~values~with~global }
  { \UseInstance { test } { run } }

\OMIT

  \DeclareTemplateInterface { test } { std3 } { 0 }
    {
      bool-a : boolean = true ,
      bool-b : boolean = \KeyValue { bool-a } ,
    }
  \DeclareTemplateCode { test } { std3 } { 0 }
    {
      bool-a = \l_tmpa_bool ,
      bool-b = \l_tmpb_bool
    }
    {
      \typeout { \bool_if:NTF \l_tmpa_bool { true } { false } }
      \typeout { \bool_if:NTF \l_tmpb_bool { true } { false } }
    }

\TIMO

\TEST { Key~values~for~booleans }
  {
    \DeclareInstance { test } { runaway } { std3 } { }
    \UseInstance { test } { runaway }
  }

\OMIT

  \clist_new:N \clistcode
  \dim_new:N \dimcode
  \fp_new:N \fpcode
  \int_new:N \intcode
  \muskip_new:N \muskipcode
  \skip_new:N \skipcode
  \tl_new:N \tlcode
  \DeclareTemplateInterface { test } { std4 } { 0 }
    {
      clist.code : commalist ,
      code.clist : commalist = \KeyValue { clist.code } ,
      dim.code : length ,
      code.dim : length = \KeyValue { dim.code } ,
      fp.code : real ,
      code.fp : real = \KeyValue { fp.code } ,
      int.code : integer ,
      code.int : integer = \KeyValue { int.code } ,
      muskip.code : muskip ,
      code.muskip : muskip = \KeyValue { muskip.code } ,
      skip.code : skip ,
      code.skip : skip = \KeyValue { skip.code } ,
      tokenlist.code : tokenlist ,
      code.tokenlist : tokenlist = \KeyValue { tokenlist.code }
    }
  \DeclareTemplateCode { test } { std4 } { 0 }
    {
      clist.code = \clistcode ,
      code.clist = \clistcode ,
      dim.code = \dimcode ,
      code.dim = \dimcode ,
      fp.code = \fpcode ,
      code.fp = \fpcode ,
      int.code = \intcode ,
      code.int = \intcode ,
      muskip.code = \muskipcode ,
      code.muskip = \muskipcode ,
      skip.code = \skipcode ,
      code.skip = \skipcode ,
      tokenlist.code = \tlcode ,
      code.tokenlist = \tlcode
    }
    {
      \AssignTemplateKeys
      ( \clist_use:Nn \clistcode { , } )
      ( \dimeval { \dimcode } )
      ( \fpeval { \fpcode } )
      ( \inteval { \intcode } )
      ( \the \muexpr \muskipcode \relax )
      ( \the \glueexpr \skipcode \relax )
      ( \tlcode )
    }

\TIMO

\TEST { Key-value~passing }
  {
    \DeclareInstance{ test } { i1 } { std4 }
      {
        clist.code = { a , b , c } ,
        dim.code = 1pt ,
        fp.code = 1 ,
        int.code = 1 ,
        muskip.code = 1mu ,
        skip.code = 1pt ,
        tokenlist.code = AAA
      }
    \DeclareInstance{ test } { i2 } { std4 }
      {
        code.clist = { a , b , c } ,
        code.dim = 1pt ,
        code.fp = 1 ,
        code.int = 1 ,
        code.muskip = 1mu ,
        code.skip = 1pt ,
        code.tokenlist = AAA
      }
    \UseInstance { test } { i1 }
    \UseInstance { test } { i2 }
  }

\END

\input{test2e}
\START
\typeout{^^J LuaTeX Callback ordering test^^J}
\ifx\directlua\undefined
\expandafter \END
\fi

\directlua{
%
% current ltluatex user-callbacks
  luatexbase.create_callback('testcallback', 'data')
%
  local call_order
  local function add_handler(name)
    luatexbase.add_to_callback('testcallback', function()
      texio.write('term and log', ' ' .. name)
    end, name)
  end
  local function run(header)
    texio.write_nl('term and log', header .. ':')
    luatexbase.call_callback('testcallback')
  end
% Add a rule before the handlers
  luatexbase.declare_callback_rule('testcallback', 'third', 'before', 'first')
  add_handler'first'
  add_handler'second'
  add_handler'third'
  add_handler'forth'
  add_handler'fifth'
  run'First try'
% And add rules afterwards
  luatexbase.declare_callback_rule('testcallback', 'third', 'before', 'second')
  luatexbase.declare_callback_rule('testcallback', 'fifth', 'before', 'forth')
  luatexbase.declare_callback_rule('testcallback', 'fifth', 'before', 'first')
  luatexbase.declare_callback_rule('testcallback', 'first', 'after', 'second')
  run'Second try'
  luatexbase.declare_callback_rule('testcallback', 'third', 'before', 'forth')
  luatexbase.declare_callback_rule('testcallback', 'second', 'after', 'third')
  luatexbase.declare_callback_rule('testcallback', 'third', 'after', 'forth')
  run'Third try'
  luatexbase.declare_callback_rule('testcallback', 'second', 'before', 'forth')
  local _, msg = pcall(run, 'Cycle')
  texio.write_nl('term and log', msg)
  luatexbase.declare_callback_rule('testcallback', 'third', 'unrelated', 'second')
  run'Recovered'
}

\END
